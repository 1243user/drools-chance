
package org.drools.informer

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;




rule "lookup question id by type and context"
salience 99
when
    $ans:   Answer( questionId == null, $ctx : questionContext, $type : questionType )
    $quest: Question( $qid : id, context == $ctx, type == $type )
then
    $ans.setQuestionId($qid);
    update($ans);
end


rule "retract all prior validation errors when a new answer is given"
salience 4 # before: "copy new answers into the corresponding questions"
when
	Answer(questionId : questionId);
	invalidAnswer : InvalidAnswer( questionId == questionId )
then
	retract(invalidAnswer);
end






rule "copy new answers into the corresponding questions"
salience 30 # before: "discard invalid multiple choice answers"
when
	answer : Answer(questionId : questionId, answerValue : value);
	question : Question(id == questionId, basicAnswerType : basicAnswerType)
then
	retract(answer);
	// Convert blank string and "null" string to real null
	// TODO should we really be handling "null" - see TOHU-3
	if (answerValue != null && (answerValue.equals("") || answerValue.equals("null"))) {
		answerValue = null;
	}
	try {
	    question.fit(answerValue,basicAnswerType);
		update(question);
	} catch (NumberFormatException e) {
		InvalidAnswer invalidAnswer = new InvalidAnswer(questionId,
		                                                "invalidDataType",
		                                                "This is not a valid number");
		insert(invalidAnswer);
	} catch (ParseException e) {
		InvalidAnswer invalidAnswer = new InvalidAnswer(questionId,
		                                                "invalidDataType",
		                                                "This is not a valid date");
		insert(invalidAnswer);
	}
end

rule "discard invalid multiple choice answers"
salience 20 # before: "copy question answers to the underlying domain model"
when
	question : MultipleChoiceQuestion(answered == true, $answers : answerItems != null, $possibleAnswers : possibleAnswers)
	$s : String() from $answers
    not PossibleAnswer( value == $s ) from $possibleAnswers
then
	question.setAnswer(null);
	update(question);
end



rule "retract orphan answers"
salience -1 # after: any rules that create questions
when
	answer : Answer(questionId : questionId);
	not(exists(Question(id == questionId)));
then
	retract(answer);
end


rule "required questions answered"
salience -1 # after: any rules that create questions
when
	question : Question(required == true, answered == false);
then
	InvalidAnswer invalidAnswer = new InvalidAnswer(question.getId(), "You must answer this question");
	invalidAnswer.setType("nonDisplayed");
	insertLogical(invalidAnswer);
end


rule "has invalid answers"
salience -2 # after: any rules that create invalid answers
when
	questionnaire : Questionnaire(invalidAnswers == false);
	exists(InvalidAnswer());
then
	questionnaire.setInvalidAnswers(true);
	update(questionnaire);
end


rule "doesn't have invalid answers"
salience -2 # after: any rules that create invalid answers
when
	questionnaire : Questionnaire(invalidAnswers == true);
	not(exists(InvalidAnswer()));
then
	questionnaire.setInvalidAnswers(false);
	update(questionnaire);
end
