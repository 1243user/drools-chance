
@declare{'metaDescrTemplate'}

    @javax.persistence.Transient
    public java.lang.String getSemanticTypeName() {
        return "@{typeName}";
    }

    @javax.persistence.Transient
    public java.lang.String getFullName() {
        return "@{package}.@{typeName}";
    }

    @javax.xml.bind.annotation.XmlTransient
    private static java.util.List<java.lang.String> @{typeName}PropertyNames;
    {
        @{typeName}PropertyNames = new java.util.LinkedList( java.util.Arrays.asList( @foreach{ prop : propertyNames } "@{prop}" @end{","} ) );
    }



    @javax.persistence.Transient
    public java.util.List<java.lang.String> getPropertyNames() {
        return @{typeName}PropertyNames;
    }


    @javax.persistence.Transient
    public java.util.List get( java.lang.String name ) {
        return get( name, true );
    }

    @javax.persistence.Transient
    public java.util.List get( java.lang.String name, boolean inferred ) {
        int index = @{typeName}PropertyNames.indexOf( name );
        @code{ int j = 0; }
        switch ( index ) {
            @foreach{ prop : propertyNames }
              case @{j} : if ( inferred ) { return @{ getter( prop, "java.util.List" ) }Inferred(); }
                else {
                    // @{simpleFlags.get(j)}
                    @if{ ! simpleFlags.get(j) }
                        return @{ getter( prop, typeNames.get(j) ) }();
                    @else{}
                        java.util.List list = new java.util.ArrayList();
                            list.add( @{ getter( prop, typeNames.get(j), 1 ) }() );
                        return list;
                    @end{}
                }
                @code{ j++; }
            @end{}
            default : return java.util.Collections.emptyList();
        }
    }

@end{}


@includeNamed{'metaDescrTemplate'}