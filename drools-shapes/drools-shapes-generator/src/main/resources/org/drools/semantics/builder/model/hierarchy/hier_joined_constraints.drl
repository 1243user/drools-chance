package org.drools.semantics.builder.model.hierarchy.opt;


import org.drools.semantics.builder.model.*;
import org.drools.semantics.builder.model.hierarchy.opt.*;
import org.optaplanner.core.api.score.buildin.hardsoft.*;

global HardSoftScoreHolder scoreHolder;


declare ChildOf
    child  : String     @key
    parent : String     @key
end

declare Has
    con    : String     @key
    pro    : String     @key
end

declare Inherits
    con    : String     @key
    pro    : String     @key
end

declare Needs
    con    : String     @key
    pro    : String     @key
end

declare Redefines
    con    : String     @key
    pro    : String     @key
end



rule "ConProxy"
salience 10
when
    ConceptImplProxy( $child : iri, $super : chosenSuper!.iri )
    ConceptImplProxy( $i : iri != $child && == $super )
then
    insertLogical( new ChildOf( $child, $i ) );
end


rule "Pro"
salience 10
when
    ConceptImplProxy( $dom : iri, chosenSuper != null, $propKeys : chosenProperties.keySet() )
    $prop : String() from $propKeys
then
    insertLogical( new Has( $dom, $prop ) );
end


//
rule "Inherit"
salience 5
when
    Has( $dom, $prop ; )
    ChildOf( $child, $dom ; )
then
    insertLogical( new Inherits( $child, $prop ) );
end

rule "Inherits so it has"
when
    Inherits( $dom, $prop ; )
then
    insertLogical( new Has( $dom, $prop ) );
end


rule "Redefines"
salience -1
when
            ConceptImplProxy( $con : iri, $original : concept.properties.keySet(), $chosen : chosenProperties.keySet() )
    $prop : String( this not memberOf $original ) from $chosen
then
    insertLogical( new Redefines( $con, $prop ) );
end

rule "Needs"
when
            ConceptImplProxy( $con : iri, chosenSuper != null, $propKeys : neededProperties )
    $prop : String() from $propKeys
then
    insertLogical( new Needs( $con, $prop ) );
end





// ############################################################################
// Constraints
// ############################################################################



rule "Child of Self"
salience 10
when
    ConceptImplProxy( $child : iri != "<http://www.w3.org/2002/07/owl#Thing>", chosenSuper!.iri == $child )
then
    scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Loop"
salience 10
when
    ChildOf( $self, $self ; )
then
    scoreHolder.addHardConstraintMatch(kcontext, -100);
end



rule "Too little"
salience -1
when
    $n : Needs( $con, $prop ; )
    not  Has( $con, $prop ; )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "Hierarchy"
salience 5
when
    ChildOf( $child, $p1 ; )
    ChildOf( $child, $p2 ; $p1 != $p2 )
then
    scoreHolder.addHardConstraintMatch(kcontext, -100);
end


rule "Too much"
salience -1
when
    $i : Has( $con, $pro ; )
    not Needs( $con, $prop ; )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1);
end


rule "Too much 2"
salience -1
when
    $r : Redefines( $con, $pro ; )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1);
end


// ############################################################################
// Debug Log
// ############################################################################


/*
rule "Log 1"
salience -11
when
    $h : Has()
then
    System.out.println( "HAS " + $h );
end
*/

/*
rule "Log 001"
salience -10
when
    $h : ConceptImplProxy( $iri : iri )
then
    System.out.println( "ConProxy is in " + $h );
end


rule "Log 0"
salience -12
when
    $h : ChildOf()
then
    System.out.println( "CHILDOF " + $h );
end

rule "Log2"
salience -13
when
    $h : Needs()
then
    System.out.println( "NEEDS " + $h );
end

rule "Log3"
salience -14
when
    $h : Inherits()
then
    System.out.println( "INHERITS " + $h );
end
*/

//rule "Log4"
//when
//    $h : IntConstraintOccurrence()
//then
//    System.out.println( "@@@@@@@@@@@ " + $h );
//end


//rule "Log56"
//salience -20000
//when
//    exists Object()
//then
//    System.out.println( "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n" );
//end
//rule "Log57"
//salience 20000
//when
//    exists Object()
//then
//    System.out.println( "\n\n******************************************************************" );
//end


//rule "Logx"
//when
//    $h : Object()
//then
//    System.out.println( $h );
//end





