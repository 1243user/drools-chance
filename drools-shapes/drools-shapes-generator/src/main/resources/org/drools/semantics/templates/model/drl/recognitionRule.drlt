@code{
    import org.semanticweb.owlapi.model.OWLQuantifiedObjectRestriction;
    import org.semanticweb.owlapi.model.OWLObjectCardinalityRestriction;
    import org.semanticweb.owlapi.model.OWLObjectMinCardinality;
    import org.semanticweb.owlapi.model.OWLObjectMaxCardinality;
    import org.semanticweb.owlapi.model.OWLObjectExactCardinality;
    import org.semanticweb.owlapi.model.OWLObjectComplementOf;
    import org.semanticweb.owlapi.model.OWLObjectSomeValuesFrom;
    import org.semanticweb.owlapi.model.OWLObjectAllValuesFrom;
    import org.semanticweb.owlapi.model.OWLObjectOneOf;

    import org.semanticweb.owlapi.model.OWLDataCardinalityRestriction;
    import org.semanticweb.owlapi.model.OWLDataMinCardinality;
    import org.semanticweb.owlapi.model.OWLDataMaxCardinality;
    import org.semanticweb.owlapi.model.OWLDataExactCardinality;
    import org.semanticweb.owlapi.model.OWLQuantifiedDataRestriction;
    import org.semanticweb.owlapi.model.OWLNaryBooleanClassExpression;
    import org.semanticweb.owlapi.model.OWLDataSomeValuesFrom;
    import org.semanticweb.owlapi.model.OWLDataAllValuesFrom;
    import org.semanticweb.owlapi.model.OWLDatatype;
    import org.semanticweb.owlapi.model.OWLDataUnionOf;
    import org.semanticweb.owlapi.model.OWLDataComplementOf;
    import org.semanticweb.owlapi.model.OWLDataOneOf;
    import org.semanticweb.owlapi.model.OWLDataIntersectionOf;
}


@declare{'recognitionRule'}

 @code{ int counter = 0; }

 package @{ defaultPackage };

 import org.drools.semantics.NamedIndividual;
 import org.drools.factmodel.traits.Traitable;

 declare NamedIndividual @Traitable() end

 @foreach{ con : concepts } @includeNamed{'deklare'; con=con } @end{}

 @foreach{ k : definitions.keySet() } @if{ ! k.anonymous } @includeNamed{ 'definitionRule'; klass=k.asOWLClass(); defn=definitions.get( k ) } @end{} @end{}

@end{}



@declare{'deklare'}
declare trait @{ con.fullyQualifiedName } @if{ con.superConcepts.size() > 0 } extends @foreach{ sup : con.superConcepts } @{ sup.fullyQualifiedName } @end{','} @end{}
@if{ usePR } @propertyReactive @end{}
    @foreach{ prop : con.properties.values } @if{ ! prop.restricted && ! prop.inherited }
        @{ prop.name } : java.util.List = new java.util.ArrayList()  @@genericType(@{ prop.target.fullyQualifiedName })
    @end{} @end{}
end
@end{}



@declare{'definitionRule'}
rule "Rule_@{counter++}_@{ klass.IRI }"
when
    @includeNamed{ 'defOr'; expr=defn; target=getConcept( klass.IRI.toQuotedString() ).fullyQualifiedName; source=null; }
then
    @if{ debug }
    System.out.println( "Recognized " + @{ context.getScopedIdentifier() } +
                        " as an instance of @{ klass.IRI.fragment } " +
                        " by rule " + drools.getRule().getName()  );
    @end{}

    don( @{ context.scopedIdentifier },
         @{ getConcept( klass.IRI.toQuotedString() ).fullyQualifiedName }.class,
         @if{ useTMS } true @else{} false @end{} );
end
@end{}


@declare{ 'defOr' }
@if{expr.operands.size() > 1 } ( @end{} @foreach{ arg : expr.operands } @includeNamed{ 'defAnd'; expr=arg; target=target; source=source; } @end{ 'or' } @if{expr.operands.size() > 1 } ) @end{}
@end{}

@declare{ 'defAnd' }
@code{ int count = 0; }
    @foreach{ arg : expr.operands } @if{ arg.anonymous && ! ( arg instanceof OWLObjectComplementOf && ! arg.operand.anonymous ) && ! ( arg instanceof OWLObjectOneOf ) }
        @code{ count++; }
    @end{} @end{}
      @if{ count > 1 } ( @end{}
      @{rootClass}( @{ context.scopedIdentifier } := core      @if{ source != null }, core memberOf @{ source } @end{}    @if{ target != null } /*, this not isA @{target}.class */ @end{}
                    @foreach{ arg : expr.operands } @if{ ! arg.anonymous }, this isA @{ getConcept( arg.IRI.toQuotedString()).fullyQualifiedName }.class
                        @elseif{ arg instanceof OWLObjectComplementOf && ! arg.operand.anonymous } /*, this not isA @{ getConcept( arg.operand.IRI.toQuotedString()).fullyQualifiedName }.class */
                        @elseif{ arg instanceof OWLQuantifiedObjectRestriction || arg instanceof OWLObjectCardinalityRestriction } @includeNamed{ 'propBinding'; arg=arg; data=false; }
                        @elseif{ arg instanceof OWLObjectOneOf } @includeNamed{ 'oneOOf'; expr=arg; }
                        @elseif{ arg instanceof OWLQuantifiedDataRestriction || arg instanceof OWLDataCardinalityRestriction } @includeNamed{ 'propBinding'; arg=arg; data=true; }
                        @elseif{ arg instanceof OWLObjectComplementOf && arg.operand instanceof OWLQuantifiedObjectRestriction } @includeNamed{ 'propBinding'; arg=arg.operand; data=false }
                             @end{} @end{}
                  )
    @foreach{ arg : expr.operands } @if{ arg.anonymous && ! ( arg instanceof OWLObjectComplementOf && ! arg.operand.anonymous ) && ! ( arg instanceof OWLObjectOneOf ) }
            and @includeNamed{ 'nestedAtom'; expr=arg } @end{}
    @end{}
        @code{ context.clearBindings(); }
    @if{ count > 1 } ) @end{}
@end{}


@declare{ 'propBinding' }
    @code{ String iri = data ? arg.property.asOWLDataProperty().IRI.toQuotedString() : arg.property.asOWLObjectProperty().IRI.toQuotedString();
           String pname = getProperty( iri ).name;
           String pk = context.getPropertyKey( pname ) }
    @if{ ! context.isPropertyBound( pk ) } @code{ context.bindProperty( pname ); } , @{ pk } : fields[ "@{pname}" ] @end{}
@end{}

@declare{ 'nestedAtom' }
    @if{ expr instanceof OWLObjectComplementOf } @includeNamed{ 'negAtom'; expr=expr }
    @elseif{ expr instanceof OWLObjectSomeValuesFrom } @includeNamed{ 'someAtom'; expr=expr }          @comment{ ObjectAll is managed by neg }
    @elseif{ expr instanceof OWLObjectCardinalityRestriction } @includeNamed{ 'numAtom'; expr=expr }
    @elseif{ expr instanceof OWLDataSomeValuesFrom } @includeNamed{ 'someData'; expr=expr; }
    @elseif{ expr instanceof OWLDataAllValuesFrom } @includeNamed{ 'allData'; expr=expr }
    @end{}
@end{}

@declare{ 'negAtom' }
@code{ String npname = getProperty( expr.operand.property.asOWLObjectProperty().IRI.toQuotedString() ).name; }
not ( @includeNamed{ 'defOr'; expr=expr.operand.filler; target=null; source=context.getPropertyKey( npname ); } )
@end{}

@declare{ 'someAtom' }
@code{ String epname = getProperty( expr.property.asOWLObjectProperty().IRI.toQuotedString() ).name; String src=context.getPropertyKey( epname ); }
exists ( @code{ context.push(); } @includeNamed{ 'defOr'; expr=expr.filler; target=null; source=src; } @code{ context.pop(); } )
@end{}


@declare{ 'numAtom' }
@code{ Object x=expr; String npname = getProperty( expr.property.asOWLObjectProperty().IRI.toQuotedString() ).name; String src=context.getPropertyKey( npname ); }
accumulate ( @code{ context.push() } @includeNamed{ 'defOr'; expr=expr.filler; target=null; source=src } @code{ context.pop(); },
             $num : count( 1 );
             $num @if{ x instanceof OWLObjectMinCardinality } >= @elseif{ x instanceof OWLObjectMaxCardinality } <= @else == @end{} @{ x.cardinality }
           )
@end{}


@declare{ 'oneOOf' }
    , get__IndividualName() @foreach{ ind : expr.individuals } == "@{ ind.IRI }" @end{ '||' }
@end{}



@declare{ 'someData' }
@code{ String edname = getProperty( expr.property.asOWLDataProperty().IRI.toQuotedString() ).name; String src=context.getPropertyKey( edname ); }
exists (
@if{ expr.filler instanceof OWLDatatype }
    @{ org.drools.semantics.utils.NameUtils.builtInTypeToWrappingJavaType( expr.filler ) }() from @{ src }
@else{}
    Object( @includeNamed{ 'dataExpr'; expr=expr.filler } ) from @{ src }
@end{} )
@end{}

@declare{ 'allData' }
@code{ String adname = getProperty( expr.property.asOWLDataProperty().IRI.toQuotedString() ).name; String src=context.getPropertyKey( adname ); }
forall (
@if{ expr.filler instanceof OWLDatatype }
     @{ org.drools.semantics.utils.NameUtils.builtInTypeToWrappingJavaType( expr.filler ) }() from @{ src }
@else{}
     Object( @includeNamed{ 'dataExpr'; expr=expr.filler } ) from @{ src }
@end{} )
@end{}

@declare{ 'numData' }
@code{ String adname = getProperty( expr.property.asOWLDataProperty().IRI.toQuotedString() ).name; String src=context.getPropertyKey( adname ); }
accumulate (
@if{ expr.filler instanceof OWLDatatype }
    @{ org.drools.semantics.utils.NameUtils.builtInTypeToWrappingJavaType( expr.filler ) }() from @{ src }
@else{}
    Object( @includeNamed{ 'dataExpr'; expr=expr.filler } ) from @{ src }
@end{} ),
    $num : count( 1 );
    $num @if{ x instanceof OWLDataMinCardinality } >= @elseif{ x instanceof OWLDataMaxCardinality } <= @else == @end{} @{ x.cardinality }
    )
@end{}




@declare{ 'dataExpr' }
    @if{ expr instanceof OWLDataComplementOf } ! ( @includeNamed{ 'dataExpr'; expr=expr.operand } )
    @elseif{ expr instanceof OWLDataIntersectionOf } ( @foreach{ arg : expr.operands } @includeNamed{ 'dataExpr'; expr=arg } @end{ "&&" } )
    @elseif{ expr instanceof OWLDataUnionOf } ( @foreach{ arg : expr.operands } @includeNamed{ 'dataExpr'; expr=arg } @end{ "||" } )
    @elseif{ expr instanceof OWLDataOneOf } ( this == @foreach{ val : expr.values } /*TODO CHECK TYPE CAST*/ @{val} @end{ "||" } )
    @else{} this instanceof @{ org.drools.semantics.utils.NameUtils.builtInTypeToWrappingJavaType( expr ) }
    @end{}
@end{}







@includeNamed{'recognitionRule'}