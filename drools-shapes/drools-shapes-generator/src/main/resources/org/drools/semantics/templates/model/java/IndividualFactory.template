@comment{
/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

}

@declare{'individualFactory'}
package @{package};


import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;


public class IndividualFactory {


    private static DateFormat formatter = new SimpleDateFormat("yyyy-mm-dd'T'HH:MM:SS'Z'");

    private static Map<String,Object> individuals;

    public static Map<String,Object> getNamedIndividuals() {
        if ( individuals == null ) {
            individuals = new HashMap<String,Object>();
            build();
        }
        return individuals;
    }

    public static Collection<String> getIndividualNames() {
        return getNamedIndividuals().keySet();
    }

    public static Collection<Object> getIndividuals() {
        return getNamedIndividuals().values();
    }


    private static Date parse( java.lang.String date ) {
        try {
            return formatter.parse( date );
        } catch (ParseException e) {
            return null;
        }
    }

    public static void clear() {
        individuals = null;
    }

    private static void build() {
        @code{ String mode; }

        @foreach{ ind : individuals }
            @{ind.type} @{ind.name} = new @{ind.type}Impl();
            ( (@{ind.type}Impl) @{ind.name} ).setDyEntryId( "@{ind.name}" );
            individuals.put( "@{ind.name}", @{ind.name} );
        @end{}


        @foreach{ ind : individuals }
            build_@{ind.name}( @{ind.name} );
        @end{}

    }

     public static Collection getTraitedIndividuals() {
        throw new UnsupportedOperationException( "TODO - Use TraitMantle!" );
     }

    @foreach{ ind : individuals }
    protected static void build_@{ind.name}( @{ind.type} @{ind.name} ) {
        @foreach{ propName : ind.propertyVals.keySet() }
                        @foreach{ val : ind.propertyVals[ propName ] }
                            @if{ val.type.equals( "xsd:dateTime" ) }
                                @{ind.name}.add@{ capitalize( propName ) }( parse( @{ val.value } ) );
                            @else{}
                                // @{val.type}
                                @if{ val.type.startsWith( "xsd:" ) }
                                    @{ind.name}.add@{ capitalize( propName ) }( @{ val.value } );
                                @else{}
                                    @{ind.name}.add@{ capitalize( propName ) }( individuals.get( "@{ val.value }" ) );
                                @end{}
                            @end{}
                        @end{}
                    @end{}
    }
    @end{}


}
@end{}


@includeNamed{'individualFactory'}


