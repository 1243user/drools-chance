@comment{
/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

}


@declare{'restrictedGetterSetter'}


    @@javax.persistence.Transient
    public void @{ setter( name ) } (
        @if{ max != 1 } java.util.List<@{ map( type, true ) }> @else{} @{ map( type, true ) } @end{}
        x
    ) {
        @if{ max == 0 }
            throw new IllegalStateException( "The property @{ name } is restricted for this class " );
        @else{}

            java.util.List<@{map( type, true )}> removals = new java.util.ArrayList<@{map( type, true )}>();
            for ( java.lang.Object o : @{ getter( base, type ) }() ) {
                if ( o instanceof @{map( type, true )} ) {
                    removals.add( (@{map( type, true )}) o );
                }
            }

            @{ getter( base, type ) }().removeAll( removals );

            @if{ max == null || max > 1 }
                @if{ ! primitive }
                    for ( java.lang.Object y : x ) {
                        add@{ capitalize( base ) }( y );
                    }
                @else{}
                    @{ getter( base, type  ) }().addAll( x );
                @end{}
            @else{}
                @if{ ! primitive }
                    add@{ capitalize( base ) }( (java.lang.Object) x );
                @else{}
                    @{ getter( base, type  ) }().add( x );
                @end{}
            @end{}
        @end{}
    }




     @@javax.persistence.Transient
     public
        @if{ max != 1 } java.util.List<@{ map( type, true ) }> @else{} @{ map( type, true ) } @end{}

        @{ getter( name, type, max ) }()  {

        @if{ max == 0 }
            return java.util.Collections.emptyList();
        @else{}
            java.util.List<@{ map( type, true ) }> ans = new java.util.ArrayList<@{ map( type, true ) }>();

            for ( @{ map( baseType, true ) } x : @{ getter( base, type ) }() ) {
                if ( x instanceof @{ map( type, true ) } ) {
                    ans.add( (@{ map( type, true ) }) x );
                }
            }

            if ( ans.size() < @{ min } ) {
                for ( int j = ans.size(); j < @{ min }; j++ ) {
                    @{ map( type, true ) } x = @{ skolem( type ) };
                    ans.add( x );
                    add@{ capitalize( name ) }( x );
                }
            }

            // TODO : max?

            @if{ max == null || max > 1 }
                return ans;
            @else{}
                return ans.size() > 0 ? ans.get(0) : null;
            @end{}
        @end{}
     }



@end{}

@includeNamed{'restrictedGetterSetter'}




