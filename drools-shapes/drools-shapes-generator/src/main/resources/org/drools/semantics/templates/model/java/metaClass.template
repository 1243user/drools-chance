@declare{'metaClassTemplate'}

package @{ package };

public class @{ typeName }_ extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.MetadataContainer @else{} @{ supertypePackage }.@{ supertypeName }_
    @end{} implements java.io.Serializable {

    public @{ typeName }_( @{ typeName } x ) {
        super( x );
        metaClassInfo = @{ typeName }_Meta.getInstance();
    }

    @foreach{ prop : properties } @if{ localProperties.contains( prop ) }
        public static final org.drools.core.metadata.MetaProperty<@{ prop.domain },@{ prop.range },@{ prop.javaRangeType }> @{ prop.propName } = @{ typeName }_Meta.@{ prop.propName };
    @end{}@end{ '\n' }


    public static @{ typeName }_NewInstance new@{ typeName }( Object id, org.drools.core.metadata.With... args ) {
        return @{ typeName }_Meta.getInstance().newInstance( id, args );
    }
    public static @{ typeName }_NewInstance new@{ typeName }( org.drools.core.metadata.With... args ) {
        return @{ typeName }_Meta.getInstance().newInstance( args );
    }

    public static @{ typeName }_Don don@{ typeName }( Object core, org.drools.core.metadata.With... args ) {
        return new @{ typeName }_Don( core, args );
    }

    public static @{ typeName }_Modify modify( @{ typeName } x, org.drools.core.metadata.With... args ) {
        return new @{ typeName }_Modify( x, args );
    }

    public @{typeName}_Modify modify( org.drools.core.metadata.With... args ) {
        return new @{typeName}_Modify( getTarget(), args );
    }

    public @{typeName} getTarget() {
        return (@{typeName}) super.getTarget();
    }



    public static class @{ typeName }_Meta extends org.drools.core.metadata.ClassLiteral implements java.io.Serializable {

        private static @{ typeName }_Meta ___instance;

        public static @{ typeName }_Meta getInstance() {
            if ( ___instance == null ) {
                ___instance = new @{ typeName }_Meta( new org.drools.core.metadata.MetaProperty[] {
                        @foreach{ prop : properties } @if{ localProperties.contains( prop ) } @{ prop.propName }, @end{} @end{}
                } );
            }
            return ___instance;
        }


        @foreach{ prop : properties }
            @if{ localProperties.contains( prop ) }
            public static final org.drools.core.metadata.@if{ prop.simple }One@else{}Many@end{}ValuedMetaProperty
                                        <@{ prop.domain }, @{ prop.range }@if{ !prop.simple }, @{ prop.javaRangeType }@end{}> @{ prop.propName } =
                    new @{ prop.concreteType }<@{prop.domain},@{ prop.range }>
                                        ( @{ prop.position }, "@{ prop.propName }", java.net.URI.create( "@{ prop.propIri }" ) ) {

                public @{ prop.javaRangeType } get( @{ prop.domain } o ) { return o.@{ getter( prop.propName, map( prop.typeName, true ), prop.simple ? 1 : null, enhancedNames ) }(); }
                public void set( @{ prop.domain } o, @{ prop.javaRangeType } value ) { o.@{ setter( prop.propName, prop.maxCard, enhancedNames ) }( value ); }

                @if{ prop.inverse != null }
                @Override
                public org.drools.core.metadata.@if{ prop.inverse.simple }One@else{}Many@end{}ValuedMetaProperty
                                        <@{ prop.range }, @{ prop.domain }@if{ !prop.inverse.simple }, @{ prop.inverse.javaRangeType }@end{}>
                                        getInverse() {
                    return @{ prop.range }_.@{ prop.simpleTypeName }_Meta.@{ prop.inverse.propName };
                }
                @end{}

                @Override
                public boolean isDatatype() { return @{ prop.primitive }; }
            };
            @end{}
        @end{ '\n' }


        protected @{ typeName }_Meta( org.drools.core.metadata.MetaProperty[] propertyLiterals ) {
            super( propertyLiterals );
        }

        @Override
        protected void cachePropertyNames() {
            propertyNames = org.drools.core.util.ClassUtils.getSettableProperties( @{ package }.@{ typeName }.class );
        }

        @Override
        public java.net.URI getUri() {
            if ( key == null ) {
                key = java.net.URI.create( "@{ typeIri }" );
            }
            return key;
        }

        public @{ typeName }_NewInstance newInstance( Object id, org.drools.core.metadata.With... args ) {
            return new @{ typeName }_NewInstance( id, args );
        }
        public @{ typeName }_NewInstance newInstance( org.drools.core.metadata.With... args ) {
            return new @{ typeName }_NewInstance( args );
        }

        @Override
        public Class getTargetClass() {
            return (Class) @{ package }.@{ typeName }.class;
        }
    }


    public static class @{ typeName }_NewInstance
            extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.NewInstanceLiteral @else{} @{ supertypePackage }.@{ supertypeName }_.@{ supertypeName }_NewInstance @end{} implements java.io.Serializable {

        public @{ typeName }_NewInstance( Object id, org.drools.core.metadata.With... args ) {
            super( id, args );
        }
        public @{ typeName }_NewInstance( org.drools.core.metadata.With... args ) {
            super( args );
        }

        public boolean isInterface() {
            return true;
        }

        protected Object construct() {
            super.constructId( @{ typeName }.class );
            if ( getInstantiatorFactory() != null ) {
                return getInstantiatorFactory().instantiate( @{ typeName }.class, getId() );
            }
            @if{ withImpl }
            @{package}.@{ typeName }Impl x = new @{package}.@{ typeName }Impl();
            x.setDyEntryId( getId().toString() );
            return x;
            @else{}
              throw new UnsupportedOperationException( "Unable to create an instance for class @{package}.@{typeName}");
            @end{}
        }

    @foreach{ prop : properties }
    @if{ localProperties.contains( prop ) }
        public @{ typeName }_NewInstance @{ prop.propName }( @{ prop.javaRangeType } value @if{ ! prop.simple }, org.drools.core.metadata.Lit mode @end{} ) {
            getSetter().@{ prop.propName }( value @if{ ! prop.simple }, mode @end{}  );
            return this;
        }
        @if{ ! prop.simple }
        public @{ typeName }_NewInstance @{ prop.propName }( @{ prop.range } value, org.drools.core.metadata.Lit mode ) {
            getSetter().@{ prop.propName }( value, mode );
            return this;
        }
        @end{}
    @end{}
    @end{ '\n' }

        protected @{ typeName }_Modify getSetter() {
            if ( setter == null ) {
                setter = new @{ typeName }_Modify( null, this.with );
            }
            return ( @{ typeName }_Modify) setter;
        }

        @Override
        public Class getInstanceClass() {
            return @{ typeName }_Meta.getInstance().getTargetClass();
        }

    }




    public static class @{typeName}_Modify
            extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.ModifyLiteral @else{} @{ supertypePackage }.@{ supertypeName }_.@{ supertypeName }_Modify @end{} implements java.io.Serializable {

        public @{ typeName }_Modify( @{ typeName } x, org.drools.core.metadata.With... args ) {
            super( x, args );
        }

        @Override
        protected org.drools.core.metadata.MetaClass getMetaClassInfo() {
            return @{ typeName }_Meta.getInstance();
        }

        public Class getModificationClass() {
            return @{ package }.@{ typeName }.class;
        }

    @foreach{ prop : properties }
    @if{ localProperties.contains( prop ) }
        public @{typeName}_Modify @{ prop.propName }( @{ prop.javaRangeType } newVal @if{ ! prop.simple }, org.drools.core.metadata.Lit mode @end{} ) {
            addTask( @{ prop.propName }, newVal, @if{ ! prop.simple } mode @else{} newVal != null ? org.drools.core.metadata.Lit.SET : org.drools.core.metadata.Lit.REMOVE @end{} );
            return this;
        }
        @if{ ! prop.simple }
        public @{typeName}_Modify @{ prop.propName }( @{ prop.range } newVal, org.drools.core.metadata.Lit mode ) {
            addTask( @{ prop.propName }, java.util.Collections.singletonList( newVal ), mode );
            return this;
        }
        @end{}
    @end{}
    @end{ '\n' }

    }


    public static class @{typeName}_Don
            extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.DonLiteral @else{} @{ supertypePackage }.@{ supertypeName }_.@{ supertypeName }_Don @end{} implements java.io.Serializable {

        public @{ typeName }_Don( Object target, org.drools.core.metadata.With... args ) {
            super( target, args );
        }

        @Override
        protected org.drools.core.metadata.MetaClass getMetaClassInfo() {
            return @{ typeName }_Meta.getInstance();
        }

        @Override
        public Class getTrait() {
            return @{ typeName }_Meta.getInstance().getTargetClass();
        }

        @Override
        public @{ typeName }_Don setTraitFactory( org.drools.core.factmodel.traits.AbstractTraitFactory factory ) {
            super.setTraitFactory( factory );
            return this;
        }

    @foreach{ prop : properties }
    @if{ localProperties.contains( prop ) }
        public @{ typeName }_Don @{ prop.propName }( @{ prop.javaRangeType } value @if{ ! prop.simple }, org.drools.core.metadata.Lit mode @end{} ) {
            getSetter().@{ prop.propName }( value @if{ ! prop.simple }, mode @end{}  );
            return this;
        }
        @if{ ! prop.simple }
        public @{ typeName }_Don @{ prop.propName }( @{ prop.range } value, org.drools.core.metadata.Lit mode ) {
            getSetter().@{ prop.propName }( value, mode );
            return this;
        }
        @end{}
    @end{}
    @end{ '\n' }

        protected @{ typeName }_Modify getSetter() {
            if ( setter == null ) {
                setter = new @{ typeName }_Modify( null, this.with );
            }
            return ( @{ typeName }_Modify) setter;
        }
    }



}
@end{}

@includeNamed{'metaClassTemplate'}