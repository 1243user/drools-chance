
@declare{'metaClassTemplate'}

package @{ package };

public class @{ typeName }_<T extends @{ typeName }> extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.MetadataContainer<T> @else{} @{ supertypePackage }.@{ supertypeName }_<T> @end{} {

        public @{ typeName }_( T x ) {
            super( x );
            metaClassInfo = @{ typeName }_Meta.getInstance();
        }

        @code{ int q = 0; }
        @foreach{ prop : propertyNames }
            @if{ ! inheritedFlags[ q ] }
            public static final org.drools.core.metadata.MetaProperty<@{package}.@{typeName},@{javaTypeNames[ q ]}> @{ prop } = @{ typeName }_Meta.@{ prop };
            @end{}
            @code{ q++; }
        @end{ '\n' }

        public static class @{typeName}_Modify<T extends @{typeName}> extends @if{ "Thing".equals( supertypeName ) } org.drools.core.metadata.MetadataContainer.ModifyLiteral<T> @else{} @{ supertypePackage }.@{ supertypeName }_.@{ supertypeName }_Modify<T> @end{} {
            public @{ typeName }_Modify( T x ) {
                super( x );
            }

            @Override
            protected org.drools.core.metadata.MetaClass<T> getMetaClassInfo() {
                return @{ typeName }_Meta.getInstance();
            }

            public Class getModificationClass() {
                return @{ package }.@{ typeName }.class;
            }

            @code{ int z = 0; }
            @foreach{ prop : propertyNames }
                public @{typeName}_Modify @{prop}(  @{javaTypeNames[z]} newVal ) {
                    @if{ ! inheritedFlags[z] }
                        addTask( @{prop}, newVal );
                    @else{}
                        super.@{prop}( newVal );
                    @end{}
                    return this;
                }
                @code{ z++; }
            @end{ '\n' }
        }

        public static @{typeName}_Modify<? extends @{ typeName }> modify( @{ typeName } x ) {
            return new @{ typeName }_Modify<@{ typeName }>( x );
        }


        public @{typeName}_Modify<T> modify() {
            return new @{typeName}_Modify<T>( getTarget() );
        }


    protected static class @{ typeName }_Meta<T extends @{ package }.@{ typeName }> extends org.drools.core.metadata.MetadataContainer.ClassLiteral<T> {

        private static @{ typeName }_Meta instance;

        public static @{ typeName }_Meta getInstance() {
            if ( instance == null ) {
                instance = new @{ typeName }_Meta( new org.drools.core.metadata.MetaProperty[] {
                        @code{ int t = 0; } @foreach{ prop : propertyNames } @if{ ! inheritedFlags[t] } @{ prop }, @end{} @code{ t++; } @end{}
                } );
            }
            return instance;
        }

        @code{ int k = 0; }
        @foreach{ prop : propertyNames }
            @if{ ! inheritedFlags[k] }
            public static final org.drools.core.metadata.MetaProperty<@{package}.@{typeName},@{javaTypeNames[k]}> @{prop} =
                    new org.drools.core.metadata.PropertyLiteral<@{package}.@{typeName},@{javaTypeNames[k]}>( @{k}, "@{prop}", java.net.URI.create( "@{ propertyIris[k] }" ) ) {
                public @{javaTypeNames[k]} get( @{package}.@{typeName} o ) { return o.@{ getter( prop, map( typeNames[k], true ), simpleFlags[k] ? 1 : null ) }(); }
                public void set( @{package}.@{typeName} o, @{javaTypeNames[k]} value ) { o.@{ setter( prop ) }( value ); }
            };
            @end{}
            @code{ k++; }
        @end{ '\n' }

        protected @{ typeName }_Meta( org.drools.core.metadata.MetaProperty<T, ?>[] propertyLiterals ) {
            super( propertyLiterals );
        }

        @Override
        protected void cachePropertyNames() {
            propertyNames = org.drools.core.util.ClassUtils.getSettableProperties( @{ package }.@{ typeName }.class );
        }

        @Override
        public java.net.URI getUri() {
            return java.net.URI.create( "@{ typeIri }" );
        }

    }

}
@end{}

@includeNamed{'metaClassTemplate'}