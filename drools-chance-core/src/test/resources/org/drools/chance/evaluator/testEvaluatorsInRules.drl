package org.drools.chance.test;

import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;
import org.drools.chance.reteoo.ChanceActivation;


global java.util.Map map;


declare LegacyBean
    @Traitable
    name    : String
    weight  : Double
end


declare enum Weight
@LinguisticPartition

	SLIM( "slim", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 100 ) ),

	FAT( "fat", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 0, 100, 100.01 ) );

    label : String

    set   : FuzzySet

end



declare trait SomeImpTrait

	name    : String

    body    : Weight
                    @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="weight" )

    weight  : Double
end


rule "Init"
when
then
     LegacyBean b = new LegacyBean( "joe", 65.0 );
     SomeImpTrait imp = don( b, SomeImpTrait.class );
end

rule "Imperfect as Imperfect"
when
    $b : SomeImpTrait( weight ~is Weight.FAT )
then
    Degree x = chance.getDegree();
    System.out.println( "Imp as Imp " + x );  // 0.65
    map.put( "X", x.getValue() );
end

rule "Imperfect as Boolean"
when
    $b : SomeImpTrait( weight is Weight.FAT )
then
    Degree x = chance.getDegree();
    System.out.println( "Imp as Bool " + x );  // 1.0
    map.put( "Y", x.getValue() );
end

rule "Boolean as Imperfect"
when
    $b : SomeImpTrait( this ~isA SomeImpTrait )
then
    Degree x = chance.getDegree();
    System.out.println( "Bool as Imp " + x );  // 0.5
    map.put( "Z", x.getValue() );
end

rule "Boolean as Boolean"
when
    $b : SomeImpTrait( this isA SomeImpTrait )
then
    Degree x = chance.getDegree();
    System.out.println( "Bool as Bool" + x );  // 0.5
    map.put( "W", x.getValue() );
end
