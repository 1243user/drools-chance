/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * Copyright 2011 JBoss Inc
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.chance.test;

import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;


global java.util.Map map;



declare enum Age
@LinguisticPartition

	YOUNG( "young", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 100 ) ),

	OLD( "old", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 0, 100, 100.01 ) );

    label : String

    set   : FuzzySet

end



declare Person
@Traitable

	name    : String

    years   : Double

end

declare trait Student
@Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.BASIC, degree=DegreeType.SIMPLE )

    name    : String

    years   : Double

    age     : Age
              @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="years" )

    school  : String

end




rule "Init"
when
then
    insert( new Person( "john", 25.0 ) );
end


rule "Imperfect Don"
no-loop
when
    $p : Person( years ~is Age.YOUNG )
then
    Degree degree = chance.getDegree();
    System.out.println( "X " + degree );  // 0.75
    map.put( "X", degree.getValue() );

    // imperfect don: $p is a Student only up to some degree!
    Student student = chance.don( $p, Student.class, degree );
    update( $p );
end


rule "Imperfect ~isA"
when
    $p : Person( this ~isA Student )
then
    Degree degree = chance.getDegree();
    System.out.println( "Y " + degree );  // 0.75
    map.put( "Y", degree.getValue() );
end


rule "Implicit ~isA"
when
    $p : Student( age ~is Age.OLD ) @Imperfect( family=MvlFamilies.PRODUCT )
then
    Degree degree = chance.getDegree();
    System.out.println( "Z " + degree );  // 0.75 * 0.5
    map.put( "Z", degree.getValue() );
end
