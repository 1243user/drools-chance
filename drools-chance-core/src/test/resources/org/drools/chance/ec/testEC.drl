/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * Copyright 2011 JBoss Inc
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.chance.ec;



import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;

import org.drools.chance.ChanceHelper;

import java.util.Date;



global java.util.Map map;




declare Event
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start : long
end

declare Initially extends Event
	@role(event)
	@timestamp(start)

	start : long = 0
end



declare FluentEvent
@Traitable
    start  : long
    event  : Event
    fluent : Fluent
end

declare trait Clip
@Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
end

declare trait Declip
@Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
end

declare Fluent
	event  : Event
	status : Boolean = "true/0.0"
        @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
end




query holds( Fluent $f )
	$f := Fluent( status ~== true )
end








declare enum SkyLight
@LinguisticPartition

	DARK( "dark", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 50 ) ),

	DIM( "dim", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 0, 50, 100 ) ),

	BRIGHT( "bright", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 50, 100, 100.01 ) );

    label : String

    set   : FuzzySet

end

declare enum Day
@LinguisticPartition

	NIGHT( "evening", new de.lab4inf.fuzzy.polygons.FuzzyTrapez( -0.01, 0, 4, 5 ) ),

	MORNING( "morning", new de.lab4inf.fuzzy.polygons.FuzzyTrapez( 4, 5, 12, 16 ) ),

	AFTERNOON( "afternoon", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 12, 16, 20 ) ),

	EVENING( "evening", new de.lab4inf.fuzzy.polygons.FuzzyTrapez( 20, 22, 24, 24.01 ) );

    label : String

    set   : FuzzySet

end


declare Ambient extends Event

    dayTime     : Day
            @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="hour" )
    hour        : Double

    sky         : SkyLight
            @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="radiance" )
    radiance    : Double
end




declare LightState extends Fluent
    lampId      : String
end

declare LightOn extends FluentEvent
end

declare LightOff extends FluentEvent
end

declare Lamp
    id          : String
    status      : LightState
end

query lamp( String $id, Lamp $l )
    $l := Lamp( $id ; )
end








rule "OnClip"
when
    $c : Clip( $f : fluent )
then
    retract( $c );
    Degree x = chance.getDegree();
        System.out.println( " Now clipping to degree " + x );

    $f.getStatus().update( true, x, "operator=MINUS", "family=LUKAS" );
    update( $f );
        System.out.println( " >>>>>>>>> FLUENT deg. IS " + $f.getStatus() );
end

rule "OnDeClip"
when
    $d : Declip( $f : fluent )
then
    retract( $d );
    Degree x = chance.getDegree();
        System.out.println( " Now declipping to degree " + x );

    $f.getStatus().update( true, x, "family=LUKAS" );
    update( $f );
        System.out.println( " >>>>>>>>> FLUENT deg. IS " + $f.getStatus() );
end





rule "Init"
when
then
    String lampId = "lx";

    LightState lightState = new LightState( );
            lightState.setLampId( lampId );

    Lamp lamp = new Lamp( lampId, lightState );

    insert( lamp );
    insert( lightState );
end


rule "Hour"
dialect "mvel"
when
    $h : Double() from entry-point "hour"
then
    retract( $h );
    Ambient a = new Ambient();
    with ( a )  {
        start = Math.round( $h * 3600 * 1000),
        hour = $h;
    }
    insert( a );
end







rule "Day"
no-loop // does PropSpec Work at all ???? need the @ in the class....
salience 1
when
    $a : Ambient( hour ~is Day.MORNING )
then
    Degree x = chance.getDegree();
    System.out.println( " 'MORNING WORLD " + x );
    modify ( $a ) {
        setSkyValue( SkyLight.BRIGHT, x );
    }
    System.out.println( "++++" + $a.getSky() );
end


rule "Night"
no-loop // does PropSpec Work at all ???? need the @ in the class....
salience 1
when
    $a : Ambient( hour ~is Day.EVENING )
then
    Degree x = chance.getDegree();
    System.out.println( " 'EVENING WORLD " + x );
    modify ( $a ) {
        setSkyValue( SkyLight.DARK, x );
    }
    System.out.println( "++++" + $a.getSky() );
end









rule "Off"
when
    $a : Ambient( sky ~is SkyLight.BRIGHT, $t : start )
    ?lamp( "lx", $lamp ; )
then
    Degree x = chance.getDegree();
    System.out.println( " 'Turn off to a degree " + x );

    LightOff c = new LightOff( $t, $a, $lamp.getStatus() );
    System.out.println( "\t\t@@@" + c );
    chance.don( c, Declip.class, x );

end


rule "On"
when
    $a : Ambient( sky ~is SkyLight.DARK, $t : start )
    ?lamp( "lx", $lamp ; )
then
    Degree x = chance.getDegree();
    System.out.println( " 'Turn on to a degree " + x );

    LightOn c = new LightOn( $t, $a, $lamp.getStatus() );
    System.out.println( "\t\t@@@" + c );
    chance.don( c, Declip.class, x );

end




rule "Check"
when
    $s : String( this == "check" )
    ?lamp( "lx", $lamp ; )
    ?holds( $lamp.status ; )
then
    Degree x = chance.getDegree();
    map.put( "EC", x.getValue() );
    System.err.println( " HOLDS QUERY " + x );
end
