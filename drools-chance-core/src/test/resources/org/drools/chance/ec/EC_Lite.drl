package org.drools.chance.ec;

 
import java.util.Date;
import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.degree.Degree;



declare Event
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start : long
end

declare Initially extends Event
	@role(event)
	@timestamp(start)

	start : long = 0
end



declare FluentEvent
@Traitable
    start  : long
    event  : Event
    fluent : Fluent
end

declare trait Clip
@Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
end

declare trait Declip
@Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
	@role(event)
	// @expires(0ms)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
end

declare Fluent
	event  : Event
	status : Boolean = "true/0.0"
        @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
end




query holds( Fluent $f )
	$f := Fluent( status ~== true )
end



rule "OnClip"
when
    $c : Clip( $f : fluent )
then
    retract( $c );
    Degree x = chance.getDegree();
        System.out.println( " Now clipping to degree " + x );

    $f.getStatus().update( true, x, "operator=MINUS", "family=LUKAS" );
    update( $f );
        System.out.println( " >>>>>>>>> FLUENT deg. IS " + $f.getStatus() );
end

rule "OnDeClip"
when
    $d : Declip( $f : fluent )
then
    retract( $d );
    Degree x = chance.getDegree();
        System.out.println( " Now declipping to degree " + x );

    $f.getStatus().update( true, x, "family=LUKAS" );
    update( $f );
        System.out.println( " >>>>>>>>> FLUENT deg. IS " + $f.getStatus() );
end

