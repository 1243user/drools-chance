/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * Copyright 2011 JBoss Inc
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.chance.test;

import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;

import org.drools.chance.ChanceHelper;

global java.util.Map map;




// Taken from fuzzyJess' paper example 1

declare enum AirTemperature
@LinguisticPartition

	COLD( "cold", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 20 ) ),

	NICE( "nice", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 0, 20, 35 ) ),

	HOT( "hot", new de.lab4inf.fuzzy.polygons.FuzzyTrapez( 20, 35, 100, 100.01 ) );

    label : String

    set   : FuzzySet

end


declare enum FanSpeed
@LinguisticPartition

	SLOW( "slow", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 500 ) ),

    // should be normalized, but let's stick with the original...
	MEDIUM( "medium", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 250, 500, 750 ) ),

	FAST( "fast", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 500, 1000, 1000.01 ) );

    label : String

    set   : FuzzySet

end



declare Room

    id              : String

    temperature     : AirTemperature
        @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="temp" )

    temp            : Double
end

declare Fan
    id              : String

    speed           : FanSpeed
        @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="rpm" )

    rpm             : Double

    roomId          : String
end


query fan( String $roomId, Fan $fan )
    $fan := Fan( $roomId := roomId )
end

query room( String $roomId, Room $room )
    $room := Room( $roomId := id )
end



rule "Init"
when
then
    Room room1 = new Room();
        room1.setId( "room1" );
        room1.setTemp( 3.0 );

    Fan fan1 = new Fan();
        fan1.setId( "fan1" );
        fan1.setRoomId( room1.getId() );
        fan1.setSpeedValue( null );

    insert( fan1 );

    insert( room1 );
end



rule "HOT -> FAST"
dialect "mvel"
when
    $b : Room( $id : id, temp ~is [label=hot] AirTemperature.HOT )
    ?fan( $id, $fan ; )
then
    System.out.println( "Temp is HOT to degree " +
                                 chance.getDegree( "hot" ) );

    Degree act = chance.degree;
        System.out.println( "Setting speed to FAST, with degree " + act );

    System.out.println( "\t >> " + $fan.speed );
    modify ( $fan ) {
        updateSpeedValue( FanSpeed.FAST, act );
    }
end


rule "NICE -> MEDIUM"
dialect "mvel"
when
    $b : Room( $id : id, temp ~is [label=nice] AirTemperature.NICE )
    ?fan( $id, $fan ; )
then
    System.out.println( "Temp is NICE to degree " +
                                 chance.getDegree( "nice" ) );

    Degree act = chance.degree;
        System.out.println( "Setting speed to MEDIUM, with degree " + act );

    System.out.println( "\t >> " + $fan.speed );
    modify ( $fan ) {
        updateSpeedValue( FanSpeed.MEDIUM, act );
    }
end

rule "COLD -> SLOW"
dialect "mvel"
when
    $b : Room( $id : id, temp ~is [label=cold] AirTemperature.COLD )
    ?fan( $id, $fan ; )
then
    System.out.println( "Temp is COLD to degree " +
                                     chance.getDegree( "cold" ) );

    Degree act = chance.degree;
        System.out.println( "Setting speed to SLOW, with degree " + act );

    System.out.println( "\t >> " + $fan.speed );
    modify ( $fan ) {
        updateSpeedValue( FanSpeed.SLOW, act );
    }
end



rule "Status"
salience -10
when
    $f : Fan( $speed : speed, $rpm : rpm, $roomId : roomId )
    ?room( $roomId, $room ; )
then
    System.out.println( "Current room temp is " + $room.getTemperature() );
        System.out.println( "\t Matching °C is "  + $room.getTemp() );

    System.out.println( "Fan speed (fuzzy) is " + $f.getSpeed() );
        System.out.println( "\t Matching rpm is " + $f.getRpm() );
end




rule "Apply fan"
timer ( int: 1500 )
no-loop
when
    $f : Fan( $speed : speed, $rpm : rpm, $roomId : roomId )
    ?room( $roomId, $room ; )
then
    System.out.println( " ************************************************************************************* ");
    System.out.println( "Now apply some 'physical' model to determine the room temp change, given the fan speed ");


    double deltaT = (500 - $rpm)/100.0;
    double temp = $room.getTemp() + deltaT;

    System.out.println( "Temp changed by " + deltaT  );

    // Clear the fan speed for a new inference
    modify( $f ) {
        setSpeedValue( null );
    }

    // "Mesure" the new temp
    modify( $room ) {
        setTemp( temp );
    }

    System.out.println( "After changing, the current room temp is " + $room.getTemperature() );
            System.out.println( "\t Matching °C is "  + $room.getTemp() );

    System.out.println( " ************************************************************************************* ");

    map.put( $rpm, temp );

end


