/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * Copyright 2011 JBoss Inc
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.chance.test;

import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;
import org.drools.chance.reteoo.ChanceActivation;

import org.drools.chance.ChanceHelper;

import java.util.Map;

global java.util.Map map;


declare enum Weight
@LinguisticPartition

	SLIM( "slim", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( -0.01, 0, 100 ) ),

	FAT( "fat", new de.lab4inf.fuzzy.polygons.FuzzyTriangle( 0, 100, 100.01 ) );

    label : String

    set   : FuzzySet

end


declare Imperson

	name    : String    = "john/0.3, philip/0.7"
	                @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.DISCRETE, degree=DegreeType.SIMPLE )

    body    : Weight
                    @Imperfect( kind=ImpKind.FUZZINESS, type=ImpType.LINGUISTIC, degree=DegreeType.SIMPLE, support="weight" )

    weight  : Double    = 70.0

end



declare Imperson2
	name    : String    = "john/0.3, philip/0.2, mark/0.4, frank/0.1"
	                @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.DISCRETE, degree=DegreeType.SIMPLE )
	age     : int

    weight  : Integer       = "60/0.05,80/0.05,100/0.9"
                            @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.DISCRETE, degree=DegreeType.SIMPLE )
end


rule "Init"
when
then
    insert( new Imperson( ) );
    insert( new Imperson2( ) );
end


rule "Labelled evals"
dialect "mvel"
when
    $x : Imperson(  $w : weight ~is [ label=impIs ] Weight.FAT )        // impIs        --> 0.7
       @Imperfect( label=patternAnd )                                   // patternAnd   --> 0.7, Imperson   --> 1.0

    and @Imperfect( label=outerAnd )                                    // outerAnd     --> 0.55

    $y : Imperson2( $n : name ~!= [ label=notFrank ] "frank"            // notFrank     --> 0.9
                     && @Imperfect( label=innerAnd )                    // innerAnd     --> 0.85
                    weight ~> [ label=betaJoin ] $w  )                  // betaJoin     --> 0.95
then

    map.put( "X", chance.degree.value );

    map.put( "impIs", chance.getDegree( "impIs" ).value );
    map.put( "notFrank", chance.getDegree( "notFrank" ).value );
    map.put( "betaJoin", chance.getDegree( "betaJoin" ).value );
    map.put( "patternAnd", chance.getDegree( "patternAnd" ).value );
    map.put( "outerAnd", chance.getDegree( "outerAnd" ).value );
    map.put( "innerAnd", chance.getDegree( "innerAnd" ).value );
    map.put( "Imperson", chance.getDegree( "Imperson" ).value );
end

