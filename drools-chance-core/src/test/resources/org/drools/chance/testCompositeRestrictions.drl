/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * Copyright 2011 JBoss Inc
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.drools.chance.test;

import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.factmodel.LinguisticPartition;

import de.lab4inf.fuzzy.FuzzySet;
import de.lab4inf.fuzzy.polygons.FuzzyTriangle;

import org.drools.chance.degree.Degree;
import org.drools.chance.reteoo.ChanceActivation;

import java.util.Map;

global java.util.Map map;




declare Imperson
	name    : String    = "john/0.3, philip/0.2, mark/0.4, frank/0.1"
	                @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.DISCRETE, degree=DegreeType.SIMPLE )
    age     : int       = 18
end

rule "Init"
when
then
    insert( new Imperson( ) );
end



rule "More custom combination at operator level - standard version"
when
    $b : Imperson( name == "philip" || name == "mark" )
then
    Degree x = chance.getDegree();
    System.out.println( "X " + x );  // 1.0
    map.put( "X", x.getValue() );
end


rule "More custom combination at operator level"
when
    $b : Imperson( name ~== "philip"
                    || @Imperfect( family=MvlFamilies.PRODUCT )
                   name ~== "mark" )
then
    Degree x = chance.getDegree();
    System.out.println( "Y " + x );  // 0.52
    map.put( "Y", x.getValue() );
end



rule "Yet another custom combination at operator level"
when
    $b : Imperson(
                   $n : name ~== [ label=phill ] "philip"
                    || @Imperfect( family=MvlFamilies.PRODUCT )                 // 0.52 = 0.4 + 0.2 - (0.4 * 0.2)
                   ( name ~== "mark" && name == "mark" ),

                   name ~== "frank"
                    && @Imperfect( family=MvlFamilies.GODEL )                   // 0.1 = min( 0.3, 0.1 )
                   $q: name ~== "john"
    ) @Imperfect( family=MvlFamilies.PRODUCT )
then
    Degree x = chance.getDegree();
    System.out.println( "Z " + x );                                             // 0.052 = 0.1 * 0.52
    System.out.println( "Name is Philip ? : " + chance.getDegree( "phill" ) );
    map.put( "Z", x.getValue() );
end

