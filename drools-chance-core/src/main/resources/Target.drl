/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//Tentative proposal. Aka wish-list from the language point of view


declare Weight
@role(fuzzyPartition)
    SLIM : leftShoulder(0,0,50,80)
    FAT  : rightShoulder(50,80,+Inf,+Inf)
end


declare Content
@role(fuzzyPartition)
@domain(Double)
    LOW : leftShoulder(0,0,25,50)
    MED  : triangle(25,50,75)
    HIGH : rightShoulder(50,75,100,100)
end

declare Probability
@role(fuzzyPartition)
@domain(Double)
    IMPROBABLE : leftRamp(1,0)
    PROBABLE  : rightRamp(0,1)
end



declare Person
    // Person has a name, chosen from a finite set, but we don't know which one.
    name : String       @Imperfect( kind="probability", model="discrete",
                                    degree="simple", prior="john/0.3, mark/0.7" )
    // Same for age, but we have an evidential Dirichlet model
    age : Integer       @Imperfect( kind="probability", model="dirichlet",
                                    degree="simple", prior="18/0.02, 19/0.01, 20/0.04" )
    // The height has a Gaussian (bell) distribution : mean and standard deviation are given
    height : Double     @Imperfect( kind="probability", model="gaussian",
                                    degree="simple", prior="170,15")
    // body is a linguistic variable. values are SLIM and FAT in this case, each with a fuzzy degree
    body : Weight       @Imperfect( kind="fuzzy", model="linguistic",
                                    degree="simple", prior="SLIM/0.1,FAT/0.1",
                                    domainRef="weight" )
    // weight is a standard field, no uncertainty on it. at worst, it's null...
    weight : Double		

end


declare Diet
    person : Person
    sugar : Content     @Imperfect( kind="fuzzy", model="partition", degree="simple")
    protein : Content   @Imperfect( kind="fuzzy", model="partition", degree="simple")
    fat : Content       @Imperfect( kind="fuzzy", model="partition", degree="simple")
end



rule "Probability, Simple"
when
  // We check the % that the age is exactly 18
  // The uncertainty is due to the input alone
  Person( age == 18 // --> 0.2 )
then
end


rule "Probability, Full"
when
  // Probabilistic join between two distributions.
  // Again, uncertainty is in the input
  $p1 : Person( $a : age )
  Person( this != $p1, age == @Imp(tnorm="product", snorm="lukas") $a )
  // Since age and $a have many possible values:
  // deg = False
  // for ($x : age)
  //  for ($y : $a)
  //    deg = deg ||  (   $x  &&    $y  &&    $x==$y  )
  //     p  =  p  "+" ( p($x) "*" p($y) "*" p($x==$y) )
then
end

rule "Probability, Custom"
when
  // As above, but now even "==" is custom and uncertain.
  // So, we have uncertainty in the evaluation as well as in the input.
  // The two are assumed independent
  $p1 : Person( $a : age )
  Person( this != $p1, age ~== @Imp(kind="myEqual") $a )
then
end



rule "Fuzzification"
when
    // here the input is certain. The evaluator, instead, is vague, taken from the partition "Weight"
    // The evaluator seems extracts the fuzzy set "slim" and uses it to eval the membership of weight
    Person( weight ~seems "Weight.SLIM" )
then
end



rule "Fuzzy"
when
    // The input here is vague, as well as the constraint.
    // The evaluator must consider
    // ($p.body[SLIM] && SLIM->SLIM) || ($p.body[FAT] && FAT->SLIM)
    // e.g. applying min-max composition, depending on the norms
    $p: Person( body ~seems @Imp(tnorm="..", snorm="..")  "Weight.SLIM" )
then
end



rule "Probability -> Fuzzy"
when
    // here we mix cards. The result of the constraint age==18, a Degree, is taken.
    // The value is then matched against a fuzzy set, returning a fuzzy Degree of truth
    // This can then be combined with another fuzzy degree
    Person( ((age == 18) ~seems "Probability.PROBABLE") && weight ~seems "Weight.FAT" )
then
end




rule "Update"
when
     $p : Person( $w : (weight ~seems "Weight.FAT") )
     // hybrid back-fwd chaining. Only Persons trigger the rule propagation, Diet is fetched on demand
     $d : ?Diet( person == $p )
then
    modify ($d) {
        // sets the fuzzy distribution to a single value and its degree, overwriting previous values
        // i.e. at the end sugar = [LOW/alpha, MED/0, HIGH/0]
        sugar = "LOW" : $w.degree

        // updates the current distribution, modifying the value of MED.
        // the metadata allow the selection of the s-norm to be used
        protein += @Imperfect(snorm="..") "MED" : $w.degree
    }
end




// How to model the imperfection in => ?


// Constant degree, implicit
rule "Gradual Implication"
when
    $p : Person( weight > 200 )
    ?Diet( person == $p )
then @Imperfect( prior = "0.4" )
    modify() {
        sugar = "LOW" : drools.degree       // total consequence degree
    }
end


// Query
rule "Gradual Implication II"
when
    $p : Person( weight > 200 )
    $d : ?Diet( person == $p )
    ?Implies_GradualImplicationII( $p, $d, ... )
then
    modify() {
        sugar = "LOW" : drools.degree       // total consequence degree
    }
end

