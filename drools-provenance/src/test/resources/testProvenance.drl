package org.drools.beliefs.provenance;

import org.drools.core.factmodel.traits.Entity
import com.foo.MySubKlass;
import org.test.MyKlassImpl;
import org.test.MyKlass;
import org.test.MyKlass_;
import com.foo.MySubKlass_;
import org.drools.core.metadata.Modify;
import org.drools.beliefs.provenance.annotations.*;

global java.util.List list;

rule Init
when
then
    insertLogical( MyKlass_.newMyKlass( "123" ).prop( "hello" ) );
    insert( "fooo" );
end

rule Don
@Display( "Pretty print @{$e_1}" )
no-loop
when
    $e : MyKlass( $p : prop ) @Evidence( @Display( type="1", value="@{$p} world from @{$e.getClass().getSimpleName()}" ) )
    $s : String()
then
    insertLogical( MySubKlass_.donMySubKlass( $e ) );
end


rule SetAttribute
@Display( template = "anotherExample" )
when
    $e : MySubKlass() @Evidence( value = { @Display( type="1", value = "hello" ), @Display( type="2", template = "example" ) } )
then
    insertLogical( MySubKlass_.modify( $e ).subProp( 12 ) );
end

rule AnotherSetAttribute
when
    $k : MySubKlass() @Evidence
then
    insertLogical( MySubKlass_.modify( $k ).subProp( 42 ) );
end


rule React
when
    $k : MySubKlass( subProp == 42 )
then
    list.add( "RESULT" );
end


rule NeverEver
when
    Modify()
then
    throw new IllegalStateException( "This rule should have never fired! : reified 'modifies' should never propagate directly" );
end