 // fired template pmml_header.drlt





// Imported PMML Model Theory
// Trained with :
// Creation timestamp :
// Description :
// Copyright : JBoss




package org.drools.pmml_4_0.test;

import org.drools.pmml_4_0.ModelMarker;
import org.drools.pmml_4_0.PMML4AbstractField;

import org.drools.informer.Group;
import org.drools.informer.InvalidAnswer;
import org.drools.informer.Question;
import org.drools.informer.Question.QuestionType;
import org.drools.informer.Questionnaire;
import org.drools.informer.MultipleChoiceQuestion;
import org.drools.informer.MultipleChoiceQuestion.PossibleAnswer;
import org.drools.informer.Note;
import org.drools.informer.DomainModelAssociation;
import org.drools.informer.Answer;
import org.drools.informer.domain.DomainModelSupport;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils; // fired template rootDataField.drlt









declare PMML4AbstractField
end

declare DataField extends PMML4AbstractField
 @role(event)
   valid : boolean   = false      @position(3)
   missing : boolean  = false     @position(4)
   context : String @key          @position(2)
   name    : String
//   cyclic = (false) : boolean
//   continuous = (false) : boolean
//   categorical = (false) : boolean
//   ordinal = (false) : boolean
end

declare OutputField extends DataField
@role(event)

    warning  : String = "No Warning"
    target   : boolean  = false

end

 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare AmountOfClaims extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "AmountOfClaims"



 end





 // fired template inputFromEP.drlt













rule "Input_AmountOfClaims"
when
    $in : java.lang.Double() from entry-point "in_AmountOfClaims"
    not AmountOfClaims( value == $in, context == null )
then
    AmountOfClaims input = new AmountOfClaims();
        input.setValue($in);
        input.setName("AmountOfClaims");
        input.setMissing(false);
        input.setValid(true);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_AmountOfClaims"
salience 2
when
    $new: java.lang.Double() from entry-point "in_AmountOfClaims"
    $old: AmountOfClaims( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare AgeOfCar extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "AgeOfCar"



 end





 // fired template inputFromEP.drlt













rule "Input_AgeOfCar"
when
    $in : java.lang.Double() from entry-point "in_AgeOfCar"
    not AgeOfCar( value == $in, context == null )
then
    AgeOfCar input = new AgeOfCar();
        input.setValue($in);
        input.setName("AgeOfCar");
        input.setMissing(false);
        input.setValid(true);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_AgeOfCar"
salience 2
when
    $new: java.lang.Double() from entry-point "in_AgeOfCar"
    $old: AgeOfCar( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare Domicile extends  DataField
  @role(event)
  @Traitable

   value : java.lang.String @key @position(1)
   displayValue : String =  "Domicile"



 end





 // fired template valuesOnDomainRestriction.drlt







rule "Valid_Values_Domicile"
dialect "mvel"
no-loop
salience 9999
when
    $in : Domicile( $val : value,

           value == "suburban"  ||  value == "urban"  ||  value == "rural"
          )
then
    System.out.println("--- Invalid -> valid " + $in);
    $in.valid=true;
    update($in);
end
 // fired template inputFromEP.drlt













rule "Input_Domicile"
when
    $in : java.lang.String() from entry-point "in_Domicile"
    not Domicile( value == $in, context == null )
then
    Domicile input = new Domicile();
        input.setValue($in);
        input.setName("Domicile");
        input.setMissing(false);
        input.setValid(false);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_Domicile"
salience 2
when
    $new: java.lang.String() from entry-point "in_Domicile"
    $old: Domicile( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare Scrambled extends  DataField
  @role(event)
  @Traitable

   value : int @key @position(1)
   displayValue : String =  "Scrambled"



 end





 // fired template valuesOnDomainRestriction.drlt







rule "Valid_Values_Scrambled"
dialect "mvel"
no-loop
salience 9999
when
    $in : Scrambled( $val : value,

           value == 4  ||  value == 3  ||  value == 7  ||  value == 2  ||  value == 9
          )
then
    System.out.println("--- Invalid -> valid " + $in);
    $in.valid=true;
    update($in);
end
 // fired template inputFromEP.drlt













rule "Input_Scrambled"
when
    $in : java.lang.Integer() from entry-point "in_Scrambled"
    not Scrambled( value == $in, context == null )
then
    Scrambled input = new Scrambled();
        input.setValue($in);
        input.setName("Scrambled");
        input.setMissing(false);
        input.setValid(false);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_Scrambled"
salience 2
when
    $new: java.lang.Integer() from entry-point "in_Scrambled"
    $old: Scrambled( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NoOfClaims extends  DataField
  @role(event)
  @Traitable

   value : java.lang.String @key @position(1)
   displayValue : String =  "NoOfClaims"



 end





 // fired template valuesOnDomainRestriction.drlt







rule "Valid_Values_NoOfClaims"
dialect "mvel"
no-loop
salience 9999
when
    $in : NoOfClaims( $val : value,

           value == "0"  ||  value == "1"  ||  value == "3"  ||  value == "> 3"  ||  value == "2"
          )
then
    System.out.println("--- Invalid -> valid " + $in);
    $in.valid=true;
    update($in);
end
 // fired template inputFromEP.drlt













rule "Input_NoOfClaims"
when
    $in : java.lang.String() from entry-point "in_NoOfClaims"
    not NoOfClaims( value == $in, context == null )
then
    NoOfClaims input = new NoOfClaims();
        input.setValue($in);
        input.setName("NoOfClaims");
        input.setMissing(false);
        input.setValid(false);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_NoOfClaims"
salience 2
when
    $new: java.lang.String() from entry-point "in_NoOfClaims"
    $old: NoOfClaims( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare Gender extends  DataField
  @role(event)
  @Traitable

   value : java.lang.String @key @position(1)
   displayValue : String =  "Gender"



 end





 // fired template valuesOnDomainRestriction.drlt







rule "Valid_Values_Gender"
dialect "mvel"
no-loop
salience 9999
when
    $in : Gender( $val : value,

           value == "female"  ||  value == "male"
          )
then
    System.out.println("--- Invalid -> valid " + $in);
    $in.valid=true;
    update($in);
end
 // fired template inputFromEP.drlt













rule "Input_Gender"
when
    $in : java.lang.String() from entry-point "in_Gender"
    not Gender( value == $in, context == null )
then
    Gender input = new Gender();
        input.setValue($in);
        input.setName("Gender");
        input.setMissing(false);
        input.setValid(false);
        input.setContext(null);
    System.err.println("Rule " + drools.getRule().getName() + " for input " + $in + " : will insert  " + input.toString());
    retract($in);
    insert(input);
end


rule "OverrideInput_Gender"
salience 2
when
    $new: java.lang.String() from entry-point "in_Gender"
    $old: Gender( value != $new )
then
    System.err.println(" Overriding previous values " + $old );
    retract($old);
end
 // fired template modelMark.drlt






rule "Mark_NeuralInsurance"
when
then
    ModelMarker mark = new ModelMarker( "NeuralInsurance", "NeuralNetwork" );
    insert( mark );
end

 // fired template neuralBeans.drlt











declare Stym
    @role(event)
    //@expires(1s)
    context : String
    index : String = "-1"
    value : double
    normalized : boolean = false
end

declare Synapse
    context : String
    source : String = "-1"
    target : String = "-1"
    weight : double
end


declare Charge
    @role(event)
    //@expires(1s)
    context : String
    index : String = "-1"
    source : String = "-1"
    value : double
end

 // fired template neuralLinkSynapses.drlt









rule "LinkSynapses"
when
    Stym( $ctx : context, $index : index, $val : value )
    Synapse( context == $ctx, source == $index, $target : target, $w : weight )
then
    Charge c = new Charge();
        c.setContext($ctx);
        c.setSource($index);
        c.setIndex($target);
        c.setValue($val*$w);
    insertLogical(c);
end

 // fired template neuralOutputField.drlt














rule "NeuralOutput_NeuralInsurance_13"
when
    Stym( context == "NeuralInsurance" , index == "13", $val : value, $normal : normalized )
then
    NeuralInsurance_13 x = new NeuralInsurance_13();
        x.setContext("NeuralInsurance");
        x.setValid($normal);
        x.setMissing(false);
        x.setValue($val);
    insertLogical(x);
end


 // fired template ioTypeDeclare.drlt















 // Display Name : NeuralInsurance_13

 declare NeuralInsurance_13 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_13"



 end





 // fired template updateIOField.drlt









rule "update_NeuralInsurance_13_NeuralInsurance"
salience 2000

when
    $new : NeuralInsurance_13( $ctx : context ==  "NeuralInsurance"  )
    $old : NeuralInsurance_13( context == $ctx, this before $new )
then
    System.out.println(">>>>>>>>>>>>>> NEED TO KILL " + $old);
    retract($old);
end






 // fired template neuralFire.drlt














rule "NeuralFire_NeuralInsurance_13"
salience -100
when
    java.util.List( size == 3 ) from collect ( Charge( context == "NeuralInsurance", index == "13") )
    Number( $val : doubleValue ) from accumulate (
            Charge( context == "NeuralInsurance", index == "13", $in : value ),
            init( double act = 0.0 ),
            action( act += $in; ),
            reverse( act -= $in; )
            result( act )
        )
then
    Stym y = new Stym();
        y.setContext("NeuralInsurance");
        y.setIndex("13");
        double x = $val;
        x = x;
        y.setValue(x);
        y.setNormalized( ! false );

    //System.out.println(">>>>>>>>>>>>>>  NEURON FIRED " + y);
    insertLogical(y);
end


 // fired template neuralBuildSynapses.drlt









rule "BuildSynapses_NeuralInsurance_Neuron13"
when
then
    Synapse syn;

           syn = new Synapse();
           syn.setSource("10");
           syn.setTarget("13");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.76617);
        insert(syn);

           syn = new Synapse();
           syn.setSource("11");
           syn.setTarget("13");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.5065);
        insert(syn);

           syn = new Synapse();
           syn.setSource("12");
           syn.setTarget("13");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.999797);
        insert(syn);

end



 // fired template neuralFire.drlt














rule "NeuralFire_NeuralInsurance_12"
salience -100
when
    java.util.List( size == 10 ) from collect ( Charge( context == "NeuralInsurance", index == "12") )
    Number( $val : doubleValue ) from accumulate (
            Charge( context == "NeuralInsurance", index == "12", $in : value ),
            init( double act = 0.0 ),
            action( act += $in; ),
            reverse( act -= $in; )
            result( act )
        )
then
    Stym y = new Stym();
        y.setContext("NeuralInsurance");
        y.setIndex("12");
        double x = $val;
        x = 1.0/(1+Math.exp(-x));
        y.setValue(x);
        y.setNormalized( ! true );

    //System.out.println(">>>>>>>>>>>>>>  NEURON FIRED " + y);
    insertLogical(y);
end


 // fired template neuralFire.drlt














rule "NeuralFire_NeuralInsurance_11"
salience -100
when
    java.util.List( size == 10 ) from collect ( Charge( context == "NeuralInsurance", index == "11") )
    Number( $val : doubleValue ) from accumulate (
            Charge( context == "NeuralInsurance", index == "11", $in : value ),
            init( double act = 0.0 ),
            action( act += $in; ),
            reverse( act -= $in; )
            result( act )
        )
then
    Stym y = new Stym();
        y.setContext("NeuralInsurance");
        y.setIndex("11");
        double x = $val;
        x = 1.0/(1+Math.exp(-x));
        y.setValue(x);
        y.setNormalized( ! true );

    //System.out.println(">>>>>>>>>>>>>>  NEURON FIRED " + y);
    insertLogical(y);
end


 // fired template neuralFire.drlt














rule "NeuralFire_NeuralInsurance_10"
salience -100
when
    java.util.List( size == 10 ) from collect ( Charge( context == "NeuralInsurance", index == "10") )
    Number( $val : doubleValue ) from accumulate (
            Charge( context == "NeuralInsurance", index == "10", $in : value ),
            init( double act = 0.0 ),
            action( act += $in; ),
            reverse( act -= $in; )
            result( act )
        )
then
    Stym y = new Stym();
        y.setContext("NeuralInsurance");
        y.setIndex("10");
        double x = $val;
        x = 1.0/(1+Math.exp(-x));
        y.setValue(x);
        y.setNormalized( ! true );

    //System.out.println(">>>>>>>>>>>>>>  NEURON FIRED " + y);
    insertLogical(y);
end


 // fired template neuralLayerSoftMaxNormalization.drlt














rule "LayerNormalization_NeuralInsurance_0"
salience 100
when
    $list : java.util.List( size == 3 )
        from collect ( Stym( context == "NeuralInsurance",
                            index in (  "10" , "11" , "12"  ),
                            normalized == false )
                     )
    Number( $den : doubleValue ) from accumulate (
            Stym( context == "NeuralInsurance",
                    index in (  "10" , "11" , "12"  ),
                    normalized == false, $in : value
                ),
            init( double d = 0 ),
            action( d += Math.exp($in); )
            result( d )
        )
then
    //System.out.println(">>>>>>>>>>>>>>  SOFTMAX LAYER SUM " + $den );
    for (int j = 0; j < $list.size(); j++) {
        Stym s = (Stym) $list.get(j);
        s.setNormalized(true);
        s.setValue(Math.exp(s.getValue()) / $den);
        update(s);
    }
end




 // fired template neuralBuildSynapses.drlt









rule "BuildSynapses_NeuralInsurance_Neuron10"
when
then
    Synapse syn;

           syn = new Synapse();
           syn.setSource("0");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-2.08148);
        insert(syn);

           syn = new Synapse();
           syn.setSource("1");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(3.69657);
        insert(syn);

           syn = new Synapse();
           syn.setSource("2");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.89986);
        insert(syn);

           syn = new Synapse();
           syn.setSource("3");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(5.61779);
        insert(syn);

           syn = new Synapse();
           syn.setSource("4");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.427558);
        insert(syn);

           syn = new Synapse();
           syn.setSource("5");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.25971);
        insert(syn);

           syn = new Synapse();
           syn.setSource("6");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-6.55549);
        insert(syn);

           syn = new Synapse();
           syn.setSource("7");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-4.62773);
        insert(syn);

           syn = new Synapse();
           syn.setSource("8");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(1.97525);
        insert(syn);

           syn = new Synapse();
           syn.setSource("9");
           syn.setTarget("10");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.0962);
        insert(syn);

end



 // fired template neuralBuildSynapses.drlt









rule "BuildSynapses_NeuralInsurance_Neuron11"
when
then
    Synapse syn;

           syn = new Synapse();
           syn.setSource("0");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-0.698997);
        insert(syn);

           syn = new Synapse();
           syn.setSource("1");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-3.54943);
        insert(syn);

           syn = new Synapse();
           syn.setSource("2");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-3.29632);
        insert(syn);

           syn = new Synapse();
           syn.setSource("3");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.20931);
        insert(syn);

           syn = new Synapse();
           syn.setSource("4");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(1.00497);
        insert(syn);

           syn = new Synapse();
           syn.setSource("5");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.033502);
        insert(syn);

           syn = new Synapse();
           syn.setSource("6");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(1.12016);
        insert(syn);

           syn = new Synapse();
           syn.setSource("7");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.523197);
        insert(syn);

           syn = new Synapse();
           syn.setSource("8");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-2.96135);
        insert(syn);

           syn = new Synapse();
           syn.setSource("9");
           syn.setTarget("11");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-0.398626);
        insert(syn);

end



 // fired template neuralBuildSynapses.drlt









rule "BuildSynapses_NeuralInsurance_Neuron12"
when
then
    Synapse syn;

           syn = new Synapse();
           syn.setSource("0");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.904057);
        insert(syn);

           syn = new Synapse();
           syn.setSource("1");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(1.75084);
        insert(syn);

           syn = new Synapse();
           syn.setSource("2");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(2.51658);
        insert(syn);

           syn = new Synapse();
           syn.setSource("3");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-0.151895);
        insert(syn);

           syn = new Synapse();
           syn.setSource("4");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-2.88008);
        insert(syn);

           syn = new Synapse();
           syn.setSource("5");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(0.920063);
        insert(syn);

           syn = new Synapse();
           syn.setSource("6");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-3.30742);
        insert(syn);

           syn = new Synapse();
           syn.setSource("7");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.72251);
        insert(syn);

           syn = new Synapse();
           syn.setSource("8");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-1.13156);
        insert(syn);

           syn = new Synapse();
           syn.setSource("9");
           syn.setTarget("12");
           syn.setContext("NeuralInsurance");
           syn.setWeight(-0.758563);
        insert(syn);

end



 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_9"
when
 $x : NeuralInsurance_9( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("9");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_9 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_9"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_9"
when
 $src : Domicile( missing == false, valid == true, value == "rural", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_9 x = new NeuralInsurance_9();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_9");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_9"
when
 $src : Domicile( missing == false, valid == true, value != "rural", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_9 x = new NeuralInsurance_9();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_9");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_8"
when
 $x : NeuralInsurance_8( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("8");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_8 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_8"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_8"
when
 $src : Domicile( missing == false, valid == true, value == "urban", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_8 x = new NeuralInsurance_8();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_8");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_8"
when
 $src : Domicile( missing == false, valid == true, value != "urban", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_8 x = new NeuralInsurance_8();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_8");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_7"
when
 $x : NeuralInsurance_7( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("7");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_7 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_7"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_7"
when
 $src : Domicile( missing == false, valid == true, value == "suburban", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_7 x = new NeuralInsurance_7();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_7");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_7"
when
 $src : Domicile( missing == false, valid == true, value != "suburban", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_7 x = new NeuralInsurance_7();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_7");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_6"
when
 $x : NeuralInsurance_6( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("6");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_6 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_6"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_6"
when
 $src : NoOfClaims( missing == false, valid == true, value == "2", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_6 x = new NeuralInsurance_6();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_6");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_6"
when
 $src : NoOfClaims( missing == false, valid == true, value != "2", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_6 x = new NeuralInsurance_6();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_6");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_5"
when
 $x : NeuralInsurance_5( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("5");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_5 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_5"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_5"
when
 $src : NoOfClaims( missing == false, valid == true, value == "> 3", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_5 x = new NeuralInsurance_5();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_5");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_5"
when
 $src : NoOfClaims( missing == false, valid == true, value != "> 3", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_5 x = new NeuralInsurance_5();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_5");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_4"
when
 $x : NeuralInsurance_4( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("4");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_4 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_4"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_4"
when
 $src : NoOfClaims( missing == false, valid == true, value == "3", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_4 x = new NeuralInsurance_4();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_4");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_4"
when
 $src : NoOfClaims( missing == false, valid == true, value != "3", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_4 x = new NeuralInsurance_4();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_4");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_3"
when
 $x : NeuralInsurance_3( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("3");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_3 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_3"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_3"
when
 $src : NoOfClaims( missing == false, valid == true, value == "1", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_3 x = new NeuralInsurance_3();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_3");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_3"
when
 $src : NoOfClaims( missing == false, valid == true, value != "1", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_3 x = new NeuralInsurance_3();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_3");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_2"
when
 $x : NeuralInsurance_2( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("2");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_2 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_2"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_2"
when
 $src : NoOfClaims( missing == false, valid == true, value == "0", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_2 x = new NeuralInsurance_2();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_2");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_2"
when
 $src : NoOfClaims( missing == false, valid == true, value != "0", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_2 x = new NeuralInsurance_2();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_2");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_1"
when
 $x : NeuralInsurance_1( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("1");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_1 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_1"



 end





 // fired template indicatorFieldYes.drlt








rule "indicatorFieldYes_NeuralInsurance_1"
when
 $src : Gender( missing == false, valid == true, value == "male", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_1 x = new NeuralInsurance_1();
    x.setValue(1.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_1");
  insertLogical(x);
end
 // fired template indicatorFieldNo.drlt









rule "indicatorFieldNo_NeuralInsurance_1"
when
 $src : Gender( missing == false, valid == true, value != "male", $ctx : context //!= null
                       , context == "NeuralInsurance" )
then
  NeuralInsurance_1 x = new NeuralInsurance_1();
    x.setValue(0.0);
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_1");
  insertLogical(x);
end
 // fired template neuralWireInput.drlt









rule "NeuralWireInput_NeuralInsurance_0"
when
 $x : NeuralInsurance_0( $v : valid == true, $m : missing == false,
               $model : context == "NeuralInsurance",
               $val : value)
then
    Stym x = new Stym();
    x.setContext($model);
    x.setIndex("0");
    x.setValue($val);
    insertLogical(x);
end
 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare NeuralInsurance_0 extends  DataField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "NeuralInsurance_0"



 end





 // fired template lowerExtrapolateLinearTractNormalization.drlt







rule "linear_NeuralInsurance_0_0"
when
  $src : AgeOfCar( missing == false, valid == true, $val: value,
            value <= 0.01, $ctx : context
             , context == "NeuralInsurance" )
then
  NeuralInsurance_0 x = new NeuralInsurance_0();
    x.setValue((double) (0.0 + ($val - 0.01)*0.1629211103399512));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_0");
    //x.setContinous();
  insertLogical(x);
end

 // fired template upperExtrapolateLinearTractNormalization.drlt








rule "linear_NeuralInsurance_0_3"
when
  $src : AgeOfCar( missing == false, valid == true, $val: value,
            value > 11.44, $ctx : context
             , context == "NeuralInsurance" )
then
  NeuralInsurance_0 x = new NeuralInsurance_0();
    x.setValue((double) (0.5 + ($val - 3.07897)*0.05980124458350228));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_0");
    //x.setContinous();
  insertLogical(x);
end

 // fired template linearTractNormalization.drlt








rule "linear_NeuralInsurance_0_1"
when
  $src : AgeOfCar( missing == false, valid == true, $val: value, $ctx : context,
            value > 0.01 && value <= 3.07897
             , context == "NeuralInsurance" )
then
  NeuralInsurance_0 x = new NeuralInsurance_0();
    x.setValue((double) (0.0 + ($val - 0.01)*0.1629211103399512));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_0");
    //x.setContinous();
  insertLogical(x);
end
 // fired template linearTractNormalization.drlt








rule "linear_NeuralInsurance_0_2"
when
  $src : AgeOfCar( missing == false, valid == true, $val: value, $ctx : context,
            value > 3.07897 && value <= 11.44
             , context == "NeuralInsurance" )
then
  NeuralInsurance_0 x = new NeuralInsurance_0();
    x.setValue((double) (0.5 + ($val - 3.07897)*0.05980124458350228));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("NeuralInsurance_0");
    //x.setContinous();
  insertLogical(x);
end
 // fired template modelOutputBinding.drlt










rule "Model_Output_Binding_NeuralInsurance_OutAmOfClaims_Out"
dialect "mvel"
no-loop
salience 99
when
    $bean : OutAmOfClaims( $ctx : context == "NeuralInsurance" , $val : value )
    $quest : Questionnaire( context == "NeuralInsurance" )
then
    Note outNote = new Note("NeuralInsurance_OutAmOfClaims_Note");
        outNote.setContext("NeuralInsurance");
        outNote.setLabel(" null [Out] : " + $val);
    insertLogical(outNote);

end
 // fired template neuralOutputQuery.drlt














query "OutAmOfClaims" (String ctx)
    OutAmOfClaims( context == ctx , result : value )
end


 // fired template ioTypeDeclare.drlt















 // Display Name : null

 declare OutAmOfClaims extends  OutputField
  @role(event)
  @Traitable

   value : double @key @position(1)
   displayValue : String =  "OutAmOfClaims"


     residual : Double
     standardError : Double
     probability  : double = -1.0
     entityId  : int = -1


 end





 // fired template updateIOField.drlt









rule "update_OutAmOfClaims_NeuralInsurance"
salience 2000

when
    $new : OutAmOfClaims( $ctx : context ==  "NeuralInsurance"  )
    $old : OutAmOfClaims( context == $ctx, this before $new )
then
    System.out.println(">>>>>>>>>>>>>> NEED TO KILL " + $old);
    retract($old);
end






 // fired template aliasedOutput.drlt






rule "simpleOutput_AmountOfClaims_to_OutAmOfClaims"
salience -110

when
 $src : AmountOfClaims( $m : missing, $v : valid, $val : value, $ctx : context
                         , context == "NeuralInsurance"
                         )
then
  System.out.println("Cloning output " + $src );
  OutAmOfClaims x = new OutAmOfClaims();
    x.setValue($val);
    x.setMissing($m);
    x.setValid($v);
    x.setName("OutAmOfClaims");
    x.setContext($ctx);
  insert(x);
end
 // fired template modelQuestionnaire.drlt









rule "Model_Questionnaire_NeuralInsurance"
dialect "mvel"
no-loop
salience 1000
when
then
    Questionnaire questionnaire = new Questionnaire("NeuralInsurance"+"_Questionnaire");
    questionnaire.setContext("NeuralInsurance");
	questionnaire.setLabel("NeuralInsurance" + " form");

	questionnaire.setItems({   "NeuralInsurance"+"_"+"Gender" , "NeuralInsurance"+"_"+"NoOfClaims" , "NeuralInsurance"+"_"+"Domicile" , "NeuralInsurance"+"_"+"AgeOfCar" , "NeuralInsurance"+"_"+"AmountOfClaims"   });

	insertLogical(questionnaire);
end
 // fired template modelAddQuestionsToQuestionnaire.drlt





rule "Assignment"
no-loop
salience -100
when
    $questionnaire : Questionnaire( $ctx : context == "NeuralInsurance",
                                    $items : itemList )
    $question      : Question( $id : id not memberOf $items, context == $ctx )
then
    $questionnaire.addItem($id);
    update($questionnaire);
end


 // fired template modelOutputBinding.drlt










rule "Model_Output_Binding_NeuralInsurance_AmountOfClaims_Predicted"
dialect "mvel"
no-loop
salience 99
when
    $bean : AmountOfClaims( $ctx : context == "NeuralInsurance" , $val : value )
    $quest : Questionnaire( context == "NeuralInsurance" )
then
    Note outNote = new Note("NeuralInsurance_AmountOfClaims_Note");
        outNote.setContext("NeuralInsurance");
        outNote.setLabel(" null [Predicted] : " + $val);
    insertLogical(outNote);

end
 // fired template modelQuestion.drlt









rule "Model_Question_NeuralInsurance_AgeOfCar_NeuralInsurance"
no-loop
salience 99
when
then
    Question quest = new Question("NeuralInsurance"+"_"+"AgeOfCar");
        quest.setContext("NeuralInsurance");
        quest.setAnswerType(Question.QuestionType.TYPE_DECIMAL);
        quest.setPreLabel("Please insert " +  "null");
    insertLogical(quest);
end
 // fired template modelQuestionBinding.drlt









rule "Model_Question_Binding_NeuralInsurance_AgeOfCar"
dialect "mvel"
no-loop
salience 99
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_AgeOfCar" )
    $bean : AgeOfCar( $ctx : context == "NeuralInsurance" , $val : value )
    not DomainModelAssociation( questionId == $id, object == $bean, context == "NeuralInsurance" )
then
    DomainModelAssociation assoc = new DomainModelAssociation();
        assoc.setQuestionId($id);
        assoc.setContext($ctx);
        assoc.setObject($bean);
        assoc.setProperty("value");
        assoc.setLastAnswer($val);

        System.out.println("Binding " + $bean + " using " + assoc );
        System.out.println("Insert @ssociation " + assoc);
    insert(assoc);

end
 // fired template modelQuestionRebinding.drlt







rule "Model_Question_ReBinding_NeuralInsurance_AgeOfCar"
dialect "mvel"
no-loop
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_AgeOfCar", lastAnswer != null )
    $bean : AgeOfCar( context == "NeuralInsurance" )
    $assoc : DomainModelAssociation( questionId == $id, object != $bean )
then
    System.out.println("Rebinding " + $bean + " using " + $assoc );
        $assoc.setObject($bean);
    //update($assoc);
end
 // fired template modelCreateByBinding.drlt












rule "Model_Create_ReBinding_NeuralInsurance_AgeOfCar"
no-loop
salience 200
when
    $quest: Question( $id : id, type == "NeuralInsurance_AgeOfCar", context == "NeuralInsurance" )
    $ans  : Answer( questionId == $id, $val : value != "null" && != "" && != null )
    not AgeOfCar( context == "NeuralInsurance" )
then
    AgeOfCar x = new AgeOfCar();
        x.setMissing(false);
        x.setValid(false);
        x.setContext( "NeuralInsurance" );
        x.setName("AgeOfCar");

	BeanUtils.setProperty(x, "value", $val);
    System.out.println(" REBINDING OF " + x + " from " + $ans );

    insert(x);
end


 // fired template miningFieldOutlierAsExtremeUpp.drlt









rule "miningFieldOutlierAsExtremeUpp_NeuralInsurance_AgeOfCar"
salience 999
when
 $x : AgeOfCar( $m : missing == false, $v : valid == true,
               context == "NeuralInsurance",
               value > 90.0 )
then
    $x.setValue(90.0);
    $x.setMissing(false);
    $x.setValid(true);
  update($x);
end
 // fired template miningFieldOutlierAsExtremeLow.drlt









rule "miningFieldOutlierAsExtremeLow_NeuralInsurance_AgeOfCar"
salience 999
when
 $x : AgeOfCar( $m : missing == false, $v : valid == true,
               context == "NeuralInsurance",
               value < -90.0 )
then
    $x.setValue(-90.0);
    $x.setMissing(false);
    $x.setValid(true);
  update($x);
end
 // fired template miningField.drlt










rule "miningField_NeuralInsurance_AgeOfCar"
when
    $src : AgeOfCar( $m : missing, $v : valid, $x : value, context == null )
then
  AgeOfCar x = new AgeOfCar();
    x.setValue($x);
    x.setMissing($m);
    x.setValid($v);
    x.setName("AgeOfCar");
    x.setContext("NeuralInsurance");
  insertLogical(x);
end
 // fired template modelMultiQuestion.drlt









rule "Model_Multi_Question_NeuralInsurance_Domicile"
dialect "mvel"
no-loop
salience 99
when
then
    MultipleChoiceQuestion quest = new MultipleChoiceQuestion("NeuralInsurance"+"_"+"Domicile");
        quest.setContext("NeuralInsurance");
        quest.setAnswerType(Question.QuestionType.TYPE_TEXT);
        quest.setPreLabel("Please insert " + "Domicile");
        quest.setSingleAnswer(true);

        quest.setPossibleAnswers({

                new PossibleAnswer(""+"suburban",""+"suburban")
            ,
                new PossibleAnswer(""+"urban",""+"urban")
            ,
                new PossibleAnswer(""+"rural",""+"rural")







	    });

    insertLogical(quest);
end
 // fired template modelQuestionBinding.drlt









rule "Model_Question_Binding_NeuralInsurance_Domicile"
dialect "mvel"
no-loop
salience 99
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_Domicile" )
    $bean : Domicile( $ctx : context == "NeuralInsurance" , $val : value )
    not DomainModelAssociation( questionId == $id, object == $bean, context == "NeuralInsurance" )
then
    DomainModelAssociation assoc = new DomainModelAssociation();
        assoc.setQuestionId($id);
        assoc.setContext($ctx);
        assoc.setObject($bean);
        assoc.setProperty("value");
        assoc.setLastAnswer($val);

        System.out.println("Binding " + $bean + " using " + assoc );
        System.out.println("Insert @ssociation " + assoc);
    insert(assoc);

end
 // fired template modelQuestionRebinding.drlt







rule "Model_Question_ReBinding_NeuralInsurance_Domicile"
dialect "mvel"
no-loop
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_Domicile", lastAnswer != null )
    $bean : Domicile( context == "NeuralInsurance" )
    $assoc : DomainModelAssociation( questionId == $id, object != $bean )
then
    System.out.println("Rebinding " + $bean + " using " + $assoc );
        $assoc.setObject($bean);
    //update($assoc);
end
 // fired template modelCreateByBinding.drlt












rule "Model_Create_ReBinding_NeuralInsurance_Domicile"
no-loop
salience 200
when
    $quest: Question( $id : id, type == "NeuralInsurance_Domicile", context == "NeuralInsurance" )
    $ans  : Answer( questionId == $id, $val : value != "null" && != "" && != null )
    not Domicile( context == "NeuralInsurance" )
then
    Domicile x = new Domicile();
        x.setMissing(false);
        x.setValid(false);
        x.setContext( "NeuralInsurance" );
        x.setName("Domicile");

	BeanUtils.setProperty(x, "value", $val);
    System.out.println(" REBINDING OF " + x + " from " + $ans );

    insert(x);
end


 // fired template miningField.drlt










rule "miningField_NeuralInsurance_Domicile"
when
    $src : Domicile( $m : missing, $v : valid, $x : value, context == null )
then
  Domicile x = new Domicile();
    x.setValue($x);
    x.setMissing($m);
    x.setValid($v);
    x.setName("Domicile");
    x.setContext("NeuralInsurance");
  insertLogical(x);
end
 // fired template modelMultiQuestion.drlt









rule "Model_Multi_Question_NeuralInsurance_NoOfClaims"
dialect "mvel"
no-loop
salience 99
when
then
    MultipleChoiceQuestion quest = new MultipleChoiceQuestion("NeuralInsurance"+"_"+"NoOfClaims");
        quest.setContext("NeuralInsurance");
        quest.setAnswerType(Question.QuestionType.TYPE_TEXT);
        quest.setPreLabel("Please insert " + "NoOfClaims");
        quest.setSingleAnswer(true);

        quest.setPossibleAnswers({

                new PossibleAnswer(""+"0",""+"0")
            ,
                new PossibleAnswer(""+"1",""+"1")
            ,
                new PossibleAnswer(""+"3",""+"3")
            ,
                new PossibleAnswer(""+"> 3",""+"> 3")
            ,
                new PossibleAnswer(""+"2",""+"2")







	    });

    insertLogical(quest);
end
 // fired template modelQuestionBinding.drlt









rule "Model_Question_Binding_NeuralInsurance_NoOfClaims"
dialect "mvel"
no-loop
salience 99
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_NoOfClaims" )
    $bean : NoOfClaims( $ctx : context == "NeuralInsurance" , $val : value )
    not DomainModelAssociation( questionId == $id, object == $bean, context == "NeuralInsurance" )
then
    DomainModelAssociation assoc = new DomainModelAssociation();
        assoc.setQuestionId($id);
        assoc.setContext($ctx);
        assoc.setObject($bean);
        assoc.setProperty("value");
        assoc.setLastAnswer($val);

        System.out.println("Binding " + $bean + " using " + assoc );
        System.out.println("Insert @ssociation " + assoc);
    insert(assoc);

end
 // fired template modelQuestionRebinding.drlt







rule "Model_Question_ReBinding_NeuralInsurance_NoOfClaims"
dialect "mvel"
no-loop
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_NoOfClaims", lastAnswer != null )
    $bean : NoOfClaims( context == "NeuralInsurance" )
    $assoc : DomainModelAssociation( questionId == $id, object != $bean )
then
    System.out.println("Rebinding " + $bean + " using " + $assoc );
        $assoc.setObject($bean);
    //update($assoc);
end
 // fired template modelCreateByBinding.drlt












rule "Model_Create_ReBinding_NeuralInsurance_NoOfClaims"
no-loop
salience 200
when
    $quest: Question( $id : id, type == "NeuralInsurance_NoOfClaims", context == "NeuralInsurance" )
    $ans  : Answer( questionId == $id, $val : value != "null" && != "" && != null )
    not NoOfClaims( context == "NeuralInsurance" )
then
    NoOfClaims x = new NoOfClaims();
        x.setMissing(false);
        x.setValid(false);
        x.setContext( "NeuralInsurance" );
        x.setName("NoOfClaims");

	BeanUtils.setProperty(x, "value", $val);
    System.out.println(" REBINDING OF " + x + " from " + $ans );

    insert(x);
end


 // fired template miningFieldMissing.drlt









rule "miningFieldMissing_NeuralInsurance_NoOfClaims"
salience 999
when
 $x : NoOfClaims( $m : missing == true,
               context == "NeuralInsurance" )
then
    $x.setValue("3");
    $x.setMissing(false);
    $x.setValid(true);
  update($x);
end
 // fired template miningFieldInvalid.drlt









rule "miningFieldInvalid_NeuralInsurance_NoOfClaims"
salience 999
when
 $x : NoOfClaims( $m : missing, $v : valid == false,
               context == "NeuralInsurance" )
then
    $x.setValue("3");
    $x.setMissing(false);
    $x.setValid(true);
  update($x);
end
 // fired template miningField.drlt










rule "miningField_NeuralInsurance_NoOfClaims"
when
    $src : NoOfClaims( $m : missing, $v : valid, $x : value, context == null )
then
  NoOfClaims x = new NoOfClaims();
    x.setValue($x);
    x.setMissing($m);
    x.setValid($v);
    x.setName("NoOfClaims");
    x.setContext("NeuralInsurance");
  insertLogical(x);
end
 // fired template modelMultiQuestion.drlt









rule "Model_Multi_Question_NeuralInsurance_Gender"
dialect "mvel"
no-loop
salience 99
when
then
    MultipleChoiceQuestion quest = new MultipleChoiceQuestion("NeuralInsurance"+"_"+"Gender");
        quest.setContext("NeuralInsurance");
        quest.setAnswerType(Question.QuestionType.TYPE_TEXT);
        quest.setPreLabel("Please insert " + "Gender");
        quest.setSingleAnswer(true);

        quest.setPossibleAnswers({

                new PossibleAnswer(""+"female",""+"female")
            ,
                new PossibleAnswer(""+"male",""+"male")







	    });

    insertLogical(quest);
end
 // fired template modelQuestionBinding.drlt









rule "Model_Question_Binding_NeuralInsurance_Gender"
dialect "mvel"
no-loop
salience 99
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_Gender" )
    $bean : Gender( $ctx : context == "NeuralInsurance" , $val : value )
    not DomainModelAssociation( questionId == $id, object == $bean, context == "NeuralInsurance" )
then
    DomainModelAssociation assoc = new DomainModelAssociation();
        assoc.setQuestionId($id);
        assoc.setContext($ctx);
        assoc.setObject($bean);
        assoc.setProperty("value");
        assoc.setLastAnswer($val);

        System.out.println("Binding " + $bean + " using " + assoc );
        System.out.println("Insert @ssociation " + assoc);
    insert(assoc);

end
 // fired template modelQuestionRebinding.drlt







rule "Model_Question_ReBinding_NeuralInsurance_Gender"
dialect "mvel"
no-loop
when
    $quest: Question( $id : id, $type : type == "NeuralInsurance_Gender", lastAnswer != null )
    $bean : Gender( context == "NeuralInsurance" )
    $assoc : DomainModelAssociation( questionId == $id, object != $bean )
then
    System.out.println("Rebinding " + $bean + " using " + $assoc );
        $assoc.setObject($bean);
    //update($assoc);
end
 // fired template modelCreateByBinding.drlt












rule "Model_Create_ReBinding_NeuralInsurance_Gender"
no-loop
salience 200
when
    $quest: Question( $id : id, type == "NeuralInsurance_Gender", context == "NeuralInsurance" )
    $ans  : Answer( questionId == $id, $val : value != "null" && != "" && != null )
    not Gender( context == "NeuralInsurance" )
then
    Gender x = new Gender();
        x.setMissing(false);
        x.setValid(false);
        x.setContext( "NeuralInsurance" );
        x.setName("Gender");

	BeanUtils.setProperty(x, "value", $val);
    System.out.println(" REBINDING OF " + x + " from " + $ans );

    insert(x);
end


 // fired template miningField.drlt










rule "miningField_NeuralInsurance_Gender"
when
    $src : Gender( $m : missing, $v : valid, $x : value, context == null )
then
  Gender x = new Gender();
    x.setValue($x);
    x.setMissing($m);
    x.setValid($v);
    x.setName("Gender");
    x.setContext("NeuralInsurance");
  insertLogical(x);
end
 // fired template ioTrait.drlt







 declare trait NeuralInsuranceInput


        NoOfClaims   :  java.lang.String

        Domicile   :  java.lang.String

        Gender   :  java.lang.String

        AgeOfCar   :  double


 end


 rule "Link NeuralInsuranceInput"
 when
    NeuralInsuranceInput(

          NoOfClaims   :  NoOfClaims
       ,
          Domicile   :  Domicile
       ,
          Gender   :  Gender
       ,
          AgeOfCar   :  AgeOfCar

    )
 then

        drools.getEntryPoint("in_NoOfClaims").insert(NoOfClaims);

        drools.getEntryPoint("in_Domicile").insert(Domicile);

        drools.getEntryPoint("in_Gender").insert(Gender);

        drools.getEntryPoint("in_AgeOfCar").insert(AgeOfCar);

 end



 // fired template lowerExtrapolateLinearTractNormalization.drlt







rule "linear_AmountOfClaims_0"
when
  $src : NeuralInsurance_13( missing == false, valid == true, $val: value,
            value <= 0.1, $ctx : context
             , context == "NeuralInsurance" )
then
  AmountOfClaims x = new AmountOfClaims();
    x.setValue((double) (0.0 + ($val - 0.1)*3229.2));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("AmountOfClaims");
    //x.setContinous();
  insertLogical(x);
end

 // fired template upperExtrapolateLinearTractNormalization.drlt








rule "linear_AmountOfClaims_3"
when
  $src : NeuralInsurance_13( missing == false, valid == true, $val: value,
            value > 0.9, $ctx : context
             , context == "NeuralInsurance" )
then
  AmountOfClaims x = new AmountOfClaims();
    x.setValue((double) (1291.68 + ($val - 0.5)*10088.949999999999));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("AmountOfClaims");
    //x.setContinous();
  insertLogical(x);
end

 // fired template linearTractNormalization.drlt








rule "linear_AmountOfClaims_1"
when
  $src : NeuralInsurance_13( missing == false, valid == true, $val: value, $ctx : context,
            value > 0.1 && value <= 0.5
             , context == "NeuralInsurance" )
then
  AmountOfClaims x = new AmountOfClaims();
    x.setValue((double) (0.0 + ($val - 0.1)*3229.2));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("AmountOfClaims");
    //x.setContinous();
  insertLogical(x);
end
 // fired template linearTractNormalization.drlt








rule "linear_AmountOfClaims_2"
when
  $src : NeuralInsurance_13( missing == false, valid == true, $val: value, $ctx : context,
            value > 0.5 && value <= 0.9
             , context == "NeuralInsurance" )
then
  AmountOfClaims x = new AmountOfClaims();
    x.setValue((double) (1291.68 + ($val - 0.5)*10088.949999999999));
    x.setMissing(false);
    x.setValid(true);
    x.setContext($ctx);
    x.setName("AmountOfClaims");
    //x.setContinous();
  insertLogical(x);
end
 // fired template neuralClean.drlt














rule "NeuralClean_NeuralInsurance"
salience -150
when


        Gender : Gender( context == "NeuralInsurance" )


        NoOfClaims : NoOfClaims( context == "NeuralInsurance" )


        Domicile : Domicile( context == "NeuralInsurance" )


        AgeOfCar : AgeOfCar( context == "NeuralInsurance" )

then



       // retract(Gender);




       // retract(NoOfClaims);




       // retract(Domicile);




       // retract(AgeOfCar);


end


 // fired template modelInvalidAnswer.drlt










rule "Invalid_Answer_for_Question"
no-loop
when

    $bean  : DataField( valid == false, $ct : context )
    $assoc : DomainModelAssociation( $id : questionId, object == $bean )
    $quest : Question( id == $id )
then
    System.out.println("MOdel-driven invalid answer " + $bean);
    insertLogical( new InvalidAnswer($id, "invalid",  " Value of " + $bean.getClass().getSimpleName() + " not valid in model " + $ct + " >>> " + $bean) );
end
 // fired template modelRevalidate.drlt










rule "Model_Revalidate"
no-loop
salience 50
when
    question : Question(questionId : id, answerType != null, answer : answer != null )
	association : DomainModelAssociation(questionId == questionId, object : object, property : property, lastAnswer == answer )
	$bean : DataField( this == object, valid == false )
then
    System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> REVAL : " + $bean + " on " + association + " sue to " + question );
    $bean.setValid(false);

    Class propertyClass = PropertyUtils.getPropertyType(object, property);
	Object propertyValue = DomainModelSupport.answerToObject(question.getBasicAnswerType(), answer, propertyClass);
	Object oldPropertyValue = PropertyUtils.getProperty(object, property);
	PropertyUtils.setProperty(object, property, propertyValue);

	association.setLastAnswer(answer);

    update($bean);
	update(association);

end


rule "Model_Invalidate"
no-loop
salience 35
when
    Answer( questionId : questionId, value == "null" )
    question : Question( id == questionId, answerType != null );
	association : DomainModelAssociation(questionId == questionId, object : object, property : property );
	$bean : DataField( this == object )
then
    System.out.println(" @@@@@@@@@ killing " + $bean );
    retract($bean);
end