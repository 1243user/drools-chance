@comment{

  Copyright 2011 JBoss Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}




@comment{

}

@declare{'scorecardScoring'}

rule "Score Card"
salience -10  // after data are stable
when
    $card : ScoreCard( $ctx : modelName, $curr : score )
    accumulate(
        PartialScore( scoreCard == $ctx, $val : value ),
        $tot : sum ( $val );
        $tot.doubleValue != $curr )
then
    modify ( $card ) {
        setScore( $tot.doubleValue() );
    }
end


rule "Cumulate Code Scores"
salience -11
when
    $card : ScoreCard( $ctx : modelName, enableRC == true, $below : pointsBelow )
    accumulate( PartialScore( scoreCard == $ctx, $rc : reasonCode != null ),
                $set : collectSet( $rc ) )
    $code : String() from $set
    accumulate( PartialScore( scoreCard == $ctx, reasonCode == $code, $val : value, $char : characteristic )
                and
                BaselineScore( scoreCard == $ctx, characteristic == $char, $base : value ),
                $sum : sum( $below ? ($base - $val) : ($val - $base) ) )
then
//    System.out.println( "The CUMULATED score for code " + $code + " from set " + $set + " is >>> " + $sum );
    insertLogical( new CodeScore( $code, $sum.doubleValue() ) );
end


rule "Detect Scorecard ReasonCode Change"
salience -12
when
    $sc : ScoreCard( enableRC == true, $map : ranking )
    exists CodeScore( $c : code, score != $map.get( $c ) )
then
    insert( new ScoreRank( new java.util.LinkedHashMap() ) );
end


rule "Sort Scorecard Reason Codes"
salience -13
when
    $r : ScoreRank( $keys : rank.keySet() )
    $cs : CodeScore( $c : code not memberOf $keys, $s : score )
    not CodeScore( score > $s, code not memberOf $keys )
then
    modify ( $r ) {
        getRank().put( $c, $s );
    }
end


rule "Integrate Scorecard ReasonCode Map"
salience -15
when
    $s : ScoreCard( enableRC == true )
    $x : ScoreRank( $map : rank )
then
    retract( $x );
    modify ( $s ) {
        setRanking( $map );
    }
end

@end{}


@includeNamed{'scorecardScoring'}